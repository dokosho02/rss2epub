{
    "bozo": false,
    "entries": [
        {
            "title": "Python Strings and Datetime Objects",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://www.pythoncheatsheet.org/latest/feed/",
                "value": "Python Strings and Datetime Objects"
            },
            "links": [
                {
                    "rel": "alternate",
                    "type": "text/html",
                    "href": "http://www.pythoncheatsheet.org/blog/python-datetime-objects-and-strings/"
                }
            ],
            "link": "http://www.pythoncheatsheet.org/blog/python-datetime-objects-and-strings/",
            "summary": "<p>Python make it easy to transform between <em>strings</em>, <em>datetime objects</em> and vice versa, just take a good look at the <code>datetime</code> module included in the standard library.</p>\n<h2>From Datetime object to String</h2>\n<pre><code class=\"lang-python\">date_object.strftime(format)\n</code></pre>\n<p>Examples</p>\n<pre><code class=\"lang-python\">from datetime import datetime\n\n# get the current datetime\nnow = datetime.now()\nprint(now)\n# output: 2021-07-12 14:38:37.816707\n\nprint(type(now))\n# output: &lt;class 'datetime.datetime'&gt;\n\n# Lets start transforming datetime objects to strings\nexample_1 = now.strftime(&quot;%d-%b-%Y&quot;)\nprint(example_1)\n# output: '12-Jul-2021'\nprint(type(example_1))\n# output: &lt;class 'str'&gt;\n\nexample_2 = now.strftime(&quot;%d-%m-%Y&quot;)\n# output: '12-07-2021'\n\nexample_3 = now.strftime(&quot;%m-%d-%Y&quot;)\n# output: '07-12-2021'\n\nexample_4 = now.strftime(&quot;%m/%d/%Y&quot;)\n# output: '07/12/2021'\n\nexample_5 = now.strftime(&quot;%b/%d/%Y - %H:%M:%S&quot;)\n# output: 'Jul/12/2021 - 14:38:37'\n</code></pre>\n<h2>From String to Datetime object</h2>\n<p>This time we need to pass two parameters to <code>strptime()</code>, <strong>the datetime as a string</strong> and <strong>the format</strong>:</p>\n<pre><code class=\"lang-python\">datetime.strptime(datetime_string, format)\n</code></pre>\n<p>Examples</p>\n<pre><code class=\"lang-python\">from datetime import datetime\n\ndatetime_str = '12-Jul-2021'\ndatetime.strptime(datetime_str, '%d-%b-%Y')\n# output: datetime.datetime(2021, 7, 12, 0, 0)\n\ndatetime_str = 'Jul/12/2021 - 14:38:37'\ndatetime.strptime(datetime_str, &quot;%b/%d/%Y - %H:%M:%S&quot;)\n# output: datetime.datetime(2021, 7, 12, 14, 38, 37)\n</code></pre>\n<h2>strftime()\u00a0and strptime()\u00a0Format Codes</h2>\n<table>\n<thead><tr>\n<th>Directive</th>\n<th>Meaning</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>%a</code></td>\n<td>Weekday as locale\u2019s abbreviated name.</td>\n<td>Sun, Mon, \u2026, Sat (en_US)</td>\n</tr>\n<tr>\n<td><code>%A</code></td>\n<td>Weekday as locale\u2019s full name.</td>\n<td>Sunday, Monday, \u2026, Saturday (en_US)</td>\n</tr>\n<tr>\n<td><code>%w</code></td>\n<td>Weekday as a decimal number, where 0 is Sunday and 6 is Saturday.</td>\n<td>0, 1, \u2026, 6</td>\n</tr>\n<tr>\n<td><code>%d</code></td>\n<td>Day of the month as a zero-padded decimal number.</td>\n<td>01, 02, \u2026, 31</td>\n</tr>\n<tr>\n<td><code>%b</code></td>\n<td>Month as locale\u2019s abbreviated name.</td>\n<td>Jan, Feb, \u2026, Dec (en_US)</td>\n</tr>\n<tr>\n<td><code>%B</code></td>\n<td>Month as locale\u2019s full name.</td>\n<td>January, February, \u2026, December (en_US)</td>\n</tr>\n<tr>\n<td><code>%m</code></td>\n<td>Month as a zero-padded decimal number.</td>\n<td>01, 02, \u2026, 12</td>\n</tr>\n<tr>\n<td><code>%y</code></td>\n<td>Year without century as a zero-padded decimal number.</td>\n<td>00, 01, \u2026, 99</td>\n</tr>\n<tr>\n<td><code>%Y</code></td>\n<td>Year with century as a decimal number.</td>\n<td>0001, 0002, \u2026, 2013, 2014, \u2026, 9998, 9999</td>\n</tr>\n<tr>\n<td><code>%H</code></td>\n<td>Hour (24-hour clock) as a zero-padded decimal number.</td>\n<td>00, 01, \u2026, 23</td>\n</tr>\n<tr>\n<td><code>%I</code></td>\n<td>Hour (12-hour clock) as a zero-padded decimal number.</td>\n<td>01, 02, \u2026, 12</td>\n</tr>\n<tr>\n<td><code>%p</code></td>\n<td>Locale\u2019s equivalent of either AM or PM.</td>\n<td>AM, PM (en_US)</td>\n</tr>\n<tr>\n<td><code>%M</code></td>\n<td>Minute as a zero-padded decimal number.</td>\n<td>00, 01, \u2026, 59</td>\n</tr>\n<tr>\n<td><code>%S</code></td>\n<td>Second as a zero-padded decimal number.</td>\n<td>00, 01, \u2026, 59</td>\n</tr>\n<tr>\n<td><code>%f</code></td>\n<td>Microsecond as a decimal number, zero-padded on the left.</td>\n<td>000000, 000001, \u2026, 999999</td>\n</tr>\n<tr>\n<td><code>%z</code></td>\n<td>UTC offset in the form <code>\u00b1HHMM[SS[.ffffff]]</code> (empty string if the object is naive).</td>\n<td>(empty), +0000, -0400, +1030, +063415, -030712.345216</td>\n</tr>\n<tr>\n<td><code>%Z</code></td>\n<td>Time zone name (empty string if the object is naive).</td>\n<td>(empty), UTC, GMT</td>\n</tr>\n<tr>\n<td><code>%j</code></td>\n<td>Day of the year as a zero-padded decimal number.</td>\n<td>001, 002, \u2026, 366</td>\n</tr>\n<tr>\n<td><code>%U</code></td>\n<td>Week number of the year (Sunday as the first day of the week) as a zero padded decimal number. All days in a new year preceding the first Sunday are considered to be in week 0.</td>\n<td>00, 01, \u2026, 53</td>\n</tr>\n<tr>\n<td><code>%W</code></td>\n<td>Week number of the year (Monday as the first day of the week) as a decimal number. All days in a new year preceding the first Monday are considered to be in week 0.</td>\n<td>00, 01, \u2026, 53</td>\n</tr>\n<tr>\n<td><code>%c</code></td>\n<td>Locale\u2019s appropriate date and time representation.</td>\n<td>Tue Aug 16 21:30:00 1988 (en_US)</td>\n</tr>\n<tr>\n<td><code>%x</code></td>\n<td>Locale\u2019s appropriate date representation.</td>\n<td>08/16/88 (None)</td>\n</tr>\n<tr>\n<td><code>%X</code></td>\n<td>Locale\u2019s appropriate time representation.</td>\n<td>21:30:00 (en_US)</td>\n</tr>\n<tr>\n<td><code>%%</code></td>\n<td>A literal <code>'%'</code> character.</td>\n<td>%</td>\n</tr>\n</tbody>\n</table>\n<p>Read more at the <a href=\"https://docs.python.org/3/library/datetime.html#strftime-and-strptime-format-codes\">Python documentation</a>.</p>",
            "summary_detail": {
                "type": "text/html",
                "language": null,
                "base": "https://www.pythoncheatsheet.org/latest/feed/",
                "value": "<p>Python make it easy to transform between <em>strings</em>, <em>datetime objects</em> and vice versa, just take a good look at the <code>datetime</code> module included in the standard library.</p>\n<h2>From Datetime object to String</h2>\n<pre><code class=\"lang-python\">date_object.strftime(format)\n</code></pre>\n<p>Examples</p>\n<pre><code class=\"lang-python\">from datetime import datetime\n\n# get the current datetime\nnow = datetime.now()\nprint(now)\n# output: 2021-07-12 14:38:37.816707\n\nprint(type(now))\n# output: &lt;class 'datetime.datetime'&gt;\n\n# Lets start transforming datetime objects to strings\nexample_1 = now.strftime(&quot;%d-%b-%Y&quot;)\nprint(example_1)\n# output: '12-Jul-2021'\nprint(type(example_1))\n# output: &lt;class 'str'&gt;\n\nexample_2 = now.strftime(&quot;%d-%m-%Y&quot;)\n# output: '12-07-2021'\n\nexample_3 = now.strftime(&quot;%m-%d-%Y&quot;)\n# output: '07-12-2021'\n\nexample_4 = now.strftime(&quot;%m/%d/%Y&quot;)\n# output: '07/12/2021'\n\nexample_5 = now.strftime(&quot;%b/%d/%Y - %H:%M:%S&quot;)\n# output: 'Jul/12/2021 - 14:38:37'\n</code></pre>\n<h2>From String to Datetime object</h2>\n<p>This time we need to pass two parameters to <code>strptime()</code>, <strong>the datetime as a string</strong> and <strong>the format</strong>:</p>\n<pre><code class=\"lang-python\">datetime.strptime(datetime_string, format)\n</code></pre>\n<p>Examples</p>\n<pre><code class=\"lang-python\">from datetime import datetime\n\ndatetime_str = '12-Jul-2021'\ndatetime.strptime(datetime_str, '%d-%b-%Y')\n# output: datetime.datetime(2021, 7, 12, 0, 0)\n\ndatetime_str = 'Jul/12/2021 - 14:38:37'\ndatetime.strptime(datetime_str, &quot;%b/%d/%Y - %H:%M:%S&quot;)\n# output: datetime.datetime(2021, 7, 12, 14, 38, 37)\n</code></pre>\n<h2>strftime()\u00a0and strptime()\u00a0Format Codes</h2>\n<table>\n<thead><tr>\n<th>Directive</th>\n<th>Meaning</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>%a</code></td>\n<td>Weekday as locale\u2019s abbreviated name.</td>\n<td>Sun, Mon, \u2026, Sat (en_US)</td>\n</tr>\n<tr>\n<td><code>%A</code></td>\n<td>Weekday as locale\u2019s full name.</td>\n<td>Sunday, Monday, \u2026, Saturday (en_US)</td>\n</tr>\n<tr>\n<td><code>%w</code></td>\n<td>Weekday as a decimal number, where 0 is Sunday and 6 is Saturday.</td>\n<td>0, 1, \u2026, 6</td>\n</tr>\n<tr>\n<td><code>%d</code></td>\n<td>Day of the month as a zero-padded decimal number.</td>\n<td>01, 02, \u2026, 31</td>\n</tr>\n<tr>\n<td><code>%b</code></td>\n<td>Month as locale\u2019s abbreviated name.</td>\n<td>Jan, Feb, \u2026, Dec (en_US)</td>\n</tr>\n<tr>\n<td><code>%B</code></td>\n<td>Month as locale\u2019s full name.</td>\n<td>January, February, \u2026, December (en_US)</td>\n</tr>\n<tr>\n<td><code>%m</code></td>\n<td>Month as a zero-padded decimal number.</td>\n<td>01, 02, \u2026, 12</td>\n</tr>\n<tr>\n<td><code>%y</code></td>\n<td>Year without century as a zero-padded decimal number.</td>\n<td>00, 01, \u2026, 99</td>\n</tr>\n<tr>\n<td><code>%Y</code></td>\n<td>Year with century as a decimal number.</td>\n<td>0001, 0002, \u2026, 2013, 2014, \u2026, 9998, 9999</td>\n</tr>\n<tr>\n<td><code>%H</code></td>\n<td>Hour (24-hour clock) as a zero-padded decimal number.</td>\n<td>00, 01, \u2026, 23</td>\n</tr>\n<tr>\n<td><code>%I</code></td>\n<td>Hour (12-hour clock) as a zero-padded decimal number.</td>\n<td>01, 02, \u2026, 12</td>\n</tr>\n<tr>\n<td><code>%p</code></td>\n<td>Locale\u2019s equivalent of either AM or PM.</td>\n<td>AM, PM (en_US)</td>\n</tr>\n<tr>\n<td><code>%M</code></td>\n<td>Minute as a zero-padded decimal number.</td>\n<td>00, 01, \u2026, 59</td>\n</tr>\n<tr>\n<td><code>%S</code></td>\n<td>Second as a zero-padded decimal number.</td>\n<td>00, 01, \u2026, 59</td>\n</tr>\n<tr>\n<td><code>%f</code></td>\n<td>Microsecond as a decimal number, zero-padded on the left.</td>\n<td>000000, 000001, \u2026, 999999</td>\n</tr>\n<tr>\n<td><code>%z</code></td>\n<td>UTC offset in the form <code>\u00b1HHMM[SS[.ffffff]]</code> (empty string if the object is naive).</td>\n<td>(empty), +0000, -0400, +1030, +063415, -030712.345216</td>\n</tr>\n<tr>\n<td><code>%Z</code></td>\n<td>Time zone name (empty string if the object is naive).</td>\n<td>(empty), UTC, GMT</td>\n</tr>\n<tr>\n<td><code>%j</code></td>\n<td>Day of the year as a zero-padded decimal number.</td>\n<td>001, 002, \u2026, 366</td>\n</tr>\n<tr>\n<td><code>%U</code></td>\n<td>Week number of the year (Sunday as the first day of the week) as a zero padded decimal number. All days in a new year preceding the first Sunday are considered to be in week 0.</td>\n<td>00, 01, \u2026, 53</td>\n</tr>\n<tr>\n<td><code>%W</code></td>\n<td>Week number of the year (Monday as the first day of the week) as a decimal number. All days in a new year preceding the first Monday are considered to be in week 0.</td>\n<td>00, 01, \u2026, 53</td>\n</tr>\n<tr>\n<td><code>%c</code></td>\n<td>Locale\u2019s appropriate date and time representation.</td>\n<td>Tue Aug 16 21:30:00 1988 (en_US)</td>\n</tr>\n<tr>\n<td><code>%x</code></td>\n<td>Locale\u2019s appropriate date representation.</td>\n<td>08/16/88 (None)</td>\n</tr>\n<tr>\n<td><code>%X</code></td>\n<td>Locale\u2019s appropriate time representation.</td>\n<td>21:30:00 (en_US)</td>\n</tr>\n<tr>\n<td><code>%%</code></td>\n<td>A literal <code>'%'</code> character.</td>\n<td>%</td>\n</tr>\n</tbody>\n</table>\n<p>Read more at the <a href=\"https://docs.python.org/3/library/datetime.html#strftime-and-strptime-format-codes\">Python documentation</a>.</p>"
            },
            "id": "http://www.pythoncheatsheet.org/blog/python-datetime-objects-and-strings/",
            "guidislink": false
        },
        {
            "title": "Python projects with Poetry and VSCode. Part 3",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://www.pythoncheatsheet.org/latest/feed/",
                "value": "Python projects with Poetry and VSCode. Part 3"
            },
            "links": [
                {
                    "rel": "alternate",
                    "type": "text/html",
                    "href": "http://www.pythoncheatsheet.org/blog/python-projects-with-poetry-and-vscode-part-3/"
                }
            ],
            "link": "http://www.pythoncheatsheet.org/blog/python-projects-with-poetry-and-vscode-part-3/",
            "summary": "<p>In the <a href=\"https://www.pythoncheatsheet.org/blog/python-projects-with-poetry-and-vscode-part-1\">First Part</a> we:</p>\n<ul>\n<li>Started a new project.</li>\n<li>Created a Virtual Environment.</li>\n<li>Managed dependencies.</li>\n</ul>\n<p>In the <a href=\"https://www.pythoncheatsheet.org/blog/python-projects-with-poetry-and-vscode-part-2\">Second Part</a>:</p>\n<ul>\n<li>Added our virtual Environment to <a href=\"https://code.visualstudio.com/\">VSCode</a>.</li>\n<li>Integrated our dev dependencies with the editor:<ul>\n<li><em>Flake8</em></li>\n<li><em>Black</em></li>\n<li><em>Pytest</em></li>\n</ul>\n</li>\n</ul>\n<p>And finally, in this third and last part we'll:</p>\n<ul>\n<li>Write a sample library.</li>\n<li>Build our project with <em>Poetry</em>.</li>\n<li>Publish it on <em>PyPI</em>.</li>\n</ul>\n<h2>Poetry Commands</h2>\n<p>Here is a table with the commands used in this series as well as their descriptions. For a full list read the <a href=\"https://poetry.eustace.io/docs/cli/\">Poetry Documentation</a>.</p>\n<table>\n<thead><tr>\n<th>Command</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>poetry new [package-name]</code></td>\n<td>Start a new Python Project.</td>\n</tr>\n<tr>\n<td><code>poetry init</code></td>\n<td>Create a <em>pyproject.toml</em> file interactively.</td>\n</tr>\n<tr>\n<td><code>poetry install</code></td>\n<td>Install the packages inside the <em>pyproject.toml</em> file.</td>\n</tr>\n<tr>\n<td><code>poetry add [package-name]</code></td>\n<td>Add a package to a Virtual Environment.</td>\n</tr>\n<tr>\n<td><code>poetry add -D [package-name]</code></td>\n<td>Add a dev package to a Virtual Environment.</td>\n</tr>\n<tr>\n<td><code>poetry remove [package-name]</code></td>\n<td>Remove a package from a Virtual Environment.</td>\n</tr>\n<tr>\n<td><code>poetry remove -D [package-name]</code></td>\n<td>Remove a dev package from a Virtual Environment.</td>\n</tr>\n<tr>\n<td><code>poetry update</code></td>\n<td>Get the latest versions of the dependencies</td>\n</tr>\n<tr>\n<td><code>poetry shell</code></td>\n<td>Spawns a shell within the virtual environment.</td>\n</tr>\n<tr>\n<td><code>poetry build</code></td>\n<td>builds the source and wheels archives.</td>\n</tr>\n<tr>\n<td><code>poetry publish</code></td>\n<td>Publish the package to Pypi.</td>\n</tr>\n<tr>\n<td><code>poetry publish --build</code></td>\n<td>Build and publish a package.</td>\n</tr>\n<tr>\n<td><code>poetry self:update</code></td>\n<td>Update poetry to the latest stable version.</td>\n</tr>\n</tbody>\n</table>\n<h2>The Project</h2>\n<p>You can download the source code from <a href=\"https://github.com/wilfredinni/how-long\">GitHub</a> if you want, but as mentioned earlier, this will be a very simple decorator that the only thing it will do is print to the console how long it takes for a function to run:</p>\n<pre><code class=\"lang-python\">from how_long import timer\n\n@timer\ndef test_function():\n    [i for i in range(10000)]\n\ntest_function()\n# Execution Time: 955 ms.\n</code></pre>\n<p>In the end, the project directory will look, more or less, like this:</p>\n<pre><code>how-long\n\u251c\u2500\u2500 how_long\n\u2502   \u251c\u2500\u2500 how_long.py\n\u2502   \u2514\u2500\u2500 __init__.py\n\u251c\u2500\u2500 how_long.egg-info\n\u2502   \u251c\u2500\u2500 dependency_links.txt\n\u2502   \u251c\u2500\u2500 PKG-INFO\n\u2502   \u251c\u2500\u2500 requires.txt\n\u2502   \u251c\u2500\u2500 SOURCES.txt\n\u2502   \u2514\u2500\u2500 top_level.txt\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 poetry.lock\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 README.rst\n\u2514\u2500\u2500 tests\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 test_how_long.py\n</code></pre>\n<p>Before we start, check for package updates with the <code>poetry update</code> command:</p>\n<p><img alt=\"poetry update\" src=\"https://raw.githubusercontent.com/wilfredinni/pysheetComments/master/2019/May/poetry_vscode_p3/img/poetry_update.png\" /></p>\n<p>Add a short description for the project in the <code>README.rst</code>:</p>\n<pre><code>how_long\n========\n\nSimple Decorator to measure a function execution time.\n\nExample\n_______\n\n.. code-block:: python\n\n    from how_long import timer\n\n\n    @timer\n    def some_function():\n        return [x for x in range(10_000_000)]\n</code></pre>\n<p>Navigate to <code>how_long/how_long.py</code>:</p>\n<pre><code class=\"lang-python\"># how_long.py\nfrom functools import wraps\n\nimport pendulum\n\n\ndef timer(function):\n    &quot;&quot;&quot;\n    Simple Decorator to measure a function execution time.\n    &quot;&quot;&quot;\n\n    @wraps(function)\n    def function_wrapper():\n        start = pendulum.now()\n        function()\n        elapsed_time = pendulum.now() - start\n        print(f&quot;Execution Time: {elapsed_time.microseconds} ms.&quot;)\n\n    return function_wrapper\n</code></pre>\n<p>In <code>how_long/__init__.py</code>:</p>\n<pre><code class=\"lang-python\">from .how_long import timer\n\n__version__ = &quot;0.1.1&quot;\n</code></pre>\n<p>And finally, the <code>tests/test_how_long.py</code> file:</p>\n<pre><code class=\"lang-python\">from how_long import __version__\nfrom how_long import timer\n\n\ndef test_version():\n    assert __version__ == &quot;0.1.1&quot;\n\n\ndef test_wrap():\n    @timer\n    def wrapped_function():\n        return\n\n    assert wrapped_function.__name__ == &quot;wrapped_function&quot;\n</code></pre>\n<p>You can now use <code>poetry install</code> on your terminal to install and prove your package locally. Activate your virtual environment if you haven't and in the Python interactive shell:</p>\n<pre><code class=\"lang-python\">&gt;&gt;&gt; from how_long import timer\n&gt;&gt;&gt;\n&gt;&gt;&gt; @timer\n... def test_function():\n...     [i for i in range(10000)]\n...\n&gt;&gt;&gt; test_function()\nExecution Time: 705 ms.\n</code></pre>\n<p><a href=\"https://www.pythoncheatsheet.org/blog/python-projects-with-poetry-and-vscode-part-2#Pytest\">Run the tests</a> and if everything is fine, move on.</p>\n<h2>Building and Publishing</h2>\n<p>Finally, the time to make this project available to the world has come! Make sure you have an account on <a href=\"https://pypi.or\">Pypi</a>, and if not, <a href=\"https://pypi.org/account/register/\">register</a> one. Remember that the package name must be unique, if unsure use the <a href=\"https://pypi.org/search/?q=\">search</a> to check it out.</p>\n<h3>Build</h3>\n<p>The <code>poetry build</code> command builds the source and <a href=\"https://pythonwheels.com/\">wheels</a> archives that will letter be uploaded as the source of the project:</p>\n<p><img alt=\"poetry build\" src=\"https://raw.githubusercontent.com/wilfredinni/pysheetComments/master/2019/May/poetry_vscode_p3/img/poetry_build.png\" /></p>\n<p>The <em>how_long.egg-info</em> directory will be created.</p>\n<h3>Publish</h3>\n<p>This command publishes the package to <em>Pypi</em> and automatically register it before uploading if this is the first time it is submitted:</p>\n<p><img alt=\"poetry publish\" src=\"https://raw.githubusercontent.com/wilfredinni/pysheetComments/master/2019/May/poetry_vscode_p3/img/poetry_publish.png\" /></p>\n<blockquote><p>You can also build and publish your project with <code>$ poetry publish --build</code>.</p>\n</blockquote>\n<p>Enter your credentials and if everything is ok, <a href=\"https://pypi.org/project/how-long/\">browse</a> your project, and you'll see something like this:</p>\n<p><img alt=\"pipy how-long\" src=\"https://raw.githubusercontent.com/wilfredinni/pysheetComments/master/2019/May/poetry_vscode_p3/img/pypi.png\" /></p>\n<p>We can now let others know that they can <code>pip install how-long</code> from any machine, anywhere!</p>\n<h2>Conclusion</h2>\n<p>I remember the first time I tried to publish a package, and it was a nightmare. I was just starting in Python and I have to spend a \"few hours\" trying to understand what the <code>setup.py</code> file was and how to use it. In the end, I ended up with several files: a <code>Makefile</code>, a <code>MANIFEST.in</code>, a <code>requirements.txt</code> and a <code>test_requirements.txt</code>. That's why the words of <a href=\"https://github.com/sdispater\">S\u00e9bastien Eustace</a>, the creator of <a href=\"https://github.com/sdispater/poetry\">Poetry</a>, made a lot of sense to me:</p>\n<blockquote><p>Packaging and dependency management in Python are rather convoluted and hard to understand for newcomers. Even for seasoned developers it might be cumbersome at times to create all files needed in a Python project: <code>setup.py</code>, <code>requirements.txt</code>, <code>setup.cfg</code>, <code>MANIFEST.in</code> and the newly added <code>Pipfile</code>.</p>\n<p>So I wanted a tool that would limit everything to a single configuration file to do: dependency management, packaging and publishing.</p>\n<p>It takes inspiration in tools that exist in other languages, like <code>composer</code> (PHP) or <code>cargo</code> (Rust).</p>\n<p>And, finally, there is no reliable tool to properly resolve dependencies in Python, so I started <code>poetry</code> to bring an exhaustive dependency resolver to the Python community.</p>\n</blockquote>\n<p>Poetry is by <a href=\"https://frostming.com/2019/01-04/pipenv-poetry#what-about-poetry\">no means perfect</a> but, unlike other tools, it really does what promise.</p>",
            "summary_detail": {
                "type": "text/html",
                "language": null,
                "base": "https://www.pythoncheatsheet.org/latest/feed/",
                "value": "<p>In the <a href=\"https://www.pythoncheatsheet.org/blog/python-projects-with-poetry-and-vscode-part-1\">First Part</a> we:</p>\n<ul>\n<li>Started a new project.</li>\n<li>Created a Virtual Environment.</li>\n<li>Managed dependencies.</li>\n</ul>\n<p>In the <a href=\"https://www.pythoncheatsheet.org/blog/python-projects-with-poetry-and-vscode-part-2\">Second Part</a>:</p>\n<ul>\n<li>Added our virtual Environment to <a href=\"https://code.visualstudio.com/\">VSCode</a>.</li>\n<li>Integrated our dev dependencies with the editor:<ul>\n<li><em>Flake8</em></li>\n<li><em>Black</em></li>\n<li><em>Pytest</em></li>\n</ul>\n</li>\n</ul>\n<p>And finally, in this third and last part we'll:</p>\n<ul>\n<li>Write a sample library.</li>\n<li>Build our project with <em>Poetry</em>.</li>\n<li>Publish it on <em>PyPI</em>.</li>\n</ul>\n<h2>Poetry Commands</h2>\n<p>Here is a table with the commands used in this series as well as their descriptions. For a full list read the <a href=\"https://poetry.eustace.io/docs/cli/\">Poetry Documentation</a>.</p>\n<table>\n<thead><tr>\n<th>Command</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>poetry new [package-name]</code></td>\n<td>Start a new Python Project.</td>\n</tr>\n<tr>\n<td><code>poetry init</code></td>\n<td>Create a <em>pyproject.toml</em> file interactively.</td>\n</tr>\n<tr>\n<td><code>poetry install</code></td>\n<td>Install the packages inside the <em>pyproject.toml</em> file.</td>\n</tr>\n<tr>\n<td><code>poetry add [package-name]</code></td>\n<td>Add a package to a Virtual Environment.</td>\n</tr>\n<tr>\n<td><code>poetry add -D [package-name]</code></td>\n<td>Add a dev package to a Virtual Environment.</td>\n</tr>\n<tr>\n<td><code>poetry remove [package-name]</code></td>\n<td>Remove a package from a Virtual Environment.</td>\n</tr>\n<tr>\n<td><code>poetry remove -D [package-name]</code></td>\n<td>Remove a dev package from a Virtual Environment.</td>\n</tr>\n<tr>\n<td><code>poetry update</code></td>\n<td>Get the latest versions of the dependencies</td>\n</tr>\n<tr>\n<td><code>poetry shell</code></td>\n<td>Spawns a shell within the virtual environment.</td>\n</tr>\n<tr>\n<td><code>poetry build</code></td>\n<td>builds the source and wheels archives.</td>\n</tr>\n<tr>\n<td><code>poetry publish</code></td>\n<td>Publish the package to Pypi.</td>\n</tr>\n<tr>\n<td><code>poetry publish --build</code></td>\n<td>Build and publish a package.</td>\n</tr>\n<tr>\n<td><code>poetry self:update</code></td>\n<td>Update poetry to the latest stable version.</td>\n</tr>\n</tbody>\n</table>\n<h2>The Project</h2>\n<p>You can download the source code from <a href=\"https://github.com/wilfredinni/how-long\">GitHub</a> if you want, but as mentioned earlier, this will be a very simple decorator that the only thing it will do is print to the console how long it takes for a function to run:</p>\n<pre><code class=\"lang-python\">from how_long import timer\n\n@timer\ndef test_function():\n    [i for i in range(10000)]\n\ntest_function()\n# Execution Time: 955 ms.\n</code></pre>\n<p>In the end, the project directory will look, more or less, like this:</p>\n<pre><code>how-long\n\u251c\u2500\u2500 how_long\n\u2502   \u251c\u2500\u2500 how_long.py\n\u2502   \u2514\u2500\u2500 __init__.py\n\u251c\u2500\u2500 how_long.egg-info\n\u2502   \u251c\u2500\u2500 dependency_links.txt\n\u2502   \u251c\u2500\u2500 PKG-INFO\n\u2502   \u251c\u2500\u2500 requires.txt\n\u2502   \u251c\u2500\u2500 SOURCES.txt\n\u2502   \u2514\u2500\u2500 top_level.txt\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 poetry.lock\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 README.rst\n\u2514\u2500\u2500 tests\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 test_how_long.py\n</code></pre>\n<p>Before we start, check for package updates with the <code>poetry update</code> command:</p>\n<p><img alt=\"poetry update\" src=\"https://raw.githubusercontent.com/wilfredinni/pysheetComments/master/2019/May/poetry_vscode_p3/img/poetry_update.png\" /></p>\n<p>Add a short description for the project in the <code>README.rst</code>:</p>\n<pre><code>how_long\n========\n\nSimple Decorator to measure a function execution time.\n\nExample\n_______\n\n.. code-block:: python\n\n    from how_long import timer\n\n\n    @timer\n    def some_function():\n        return [x for x in range(10_000_000)]\n</code></pre>\n<p>Navigate to <code>how_long/how_long.py</code>:</p>\n<pre><code class=\"lang-python\"># how_long.py\nfrom functools import wraps\n\nimport pendulum\n\n\ndef timer(function):\n    &quot;&quot;&quot;\n    Simple Decorator to measure a function execution time.\n    &quot;&quot;&quot;\n\n    @wraps(function)\n    def function_wrapper():\n        start = pendulum.now()\n        function()\n        elapsed_time = pendulum.now() - start\n        print(f&quot;Execution Time: {elapsed_time.microseconds} ms.&quot;)\n\n    return function_wrapper\n</code></pre>\n<p>In <code>how_long/__init__.py</code>:</p>\n<pre><code class=\"lang-python\">from .how_long import timer\n\n__version__ = &quot;0.1.1&quot;\n</code></pre>\n<p>And finally, the <code>tests/test_how_long.py</code> file:</p>\n<pre><code class=\"lang-python\">from how_long import __version__\nfrom how_long import timer\n\n\ndef test_version():\n    assert __version__ == &quot;0.1.1&quot;\n\n\ndef test_wrap():\n    @timer\n    def wrapped_function():\n        return\n\n    assert wrapped_function.__name__ == &quot;wrapped_function&quot;\n</code></pre>\n<p>You can now use <code>poetry install</code> on your terminal to install and prove your package locally. Activate your virtual environment if you haven't and in the Python interactive shell:</p>\n<pre><code class=\"lang-python\">&gt;&gt;&gt; from how_long import timer\n&gt;&gt;&gt;\n&gt;&gt;&gt; @timer\n... def test_function():\n...     [i for i in range(10000)]\n...\n&gt;&gt;&gt; test_function()\nExecution Time: 705 ms.\n</code></pre>\n<p><a href=\"https://www.pythoncheatsheet.org/blog/python-projects-with-poetry-and-vscode-part-2#Pytest\">Run the tests</a> and if everything is fine, move on.</p>\n<h2>Building and Publishing</h2>\n<p>Finally, the time to make this project available to the world has come! Make sure you have an account on <a href=\"https://pypi.or\">Pypi</a>, and if not, <a href=\"https://pypi.org/account/register/\">register</a> one. Remember that the package name must be unique, if unsure use the <a href=\"https://pypi.org/search/?q=\">search</a> to check it out.</p>\n<h3>Build</h3>\n<p>The <code>poetry build</code> command builds the source and <a href=\"https://pythonwheels.com/\">wheels</a> archives that will letter be uploaded as the source of the project:</p>\n<p><img alt=\"poetry build\" src=\"https://raw.githubusercontent.com/wilfredinni/pysheetComments/master/2019/May/poetry_vscode_p3/img/poetry_build.png\" /></p>\n<p>The <em>how_long.egg-info</em> directory will be created.</p>\n<h3>Publish</h3>\n<p>This command publishes the package to <em>Pypi</em> and automatically register it before uploading if this is the first time it is submitted:</p>\n<p><img alt=\"poetry publish\" src=\"https://raw.githubusercontent.com/wilfredinni/pysheetComments/master/2019/May/poetry_vscode_p3/img/poetry_publish.png\" /></p>\n<blockquote><p>You can also build and publish your project with <code>$ poetry publish --build</code>.</p>\n</blockquote>\n<p>Enter your credentials and if everything is ok, <a href=\"https://pypi.org/project/how-long/\">browse</a> your project, and you'll see something like this:</p>\n<p><img alt=\"pipy how-long\" src=\"https://raw.githubusercontent.com/wilfredinni/pysheetComments/master/2019/May/poetry_vscode_p3/img/pypi.png\" /></p>\n<p>We can now let others know that they can <code>pip install how-long</code> from any machine, anywhere!</p>\n<h2>Conclusion</h2>\n<p>I remember the first time I tried to publish a package, and it was a nightmare. I was just starting in Python and I have to spend a \"few hours\" trying to understand what the <code>setup.py</code> file was and how to use it. In the end, I ended up with several files: a <code>Makefile</code>, a <code>MANIFEST.in</code>, a <code>requirements.txt</code> and a <code>test_requirements.txt</code>. That's why the words of <a href=\"https://github.com/sdispater\">S\u00e9bastien Eustace</a>, the creator of <a href=\"https://github.com/sdispater/poetry\">Poetry</a>, made a lot of sense to me:</p>\n<blockquote><p>Packaging and dependency management in Python are rather convoluted and hard to understand for newcomers. Even for seasoned developers it might be cumbersome at times to create all files needed in a Python project: <code>setup.py</code>, <code>requirements.txt</code>, <code>setup.cfg</code>, <code>MANIFEST.in</code> and the newly added <code>Pipfile</code>.</p>\n<p>So I wanted a tool that would limit everything to a single configuration file to do: dependency management, packaging and publishing.</p>\n<p>It takes inspiration in tools that exist in other languages, like <code>composer</code> (PHP) or <code>cargo</code> (Rust).</p>\n<p>And, finally, there is no reliable tool to properly resolve dependencies in Python, so I started <code>poetry</code> to bring an exhaustive dependency resolver to the Python community.</p>\n</blockquote>\n<p>Poetry is by <a href=\"https://frostming.com/2019/01-04/pipenv-poetry#what-about-poetry\">no means perfect</a> but, unlike other tools, it really does what promise.</p>"
            },
            "id": "http://www.pythoncheatsheet.org/blog/python-projects-with-poetry-and-vscode-part-3/",
            "guidislink": false
        },
        {
            "title": "Python projects with Poetry and VSCode. Part 2",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://www.pythoncheatsheet.org/latest/feed/",
                "value": "Python projects with Poetry and VSCode. Part 2"
            },
            "links": [
                {
                    "rel": "alternate",
                    "type": "text/html",
                    "href": "http://www.pythoncheatsheet.org/blog/python-projects-with-poetry-and-vscode-part-2/"
                }
            ],
            "link": "http://www.pythoncheatsheet.org/blog/python-projects-with-poetry-and-vscode-part-2/",
            "summary": "<p>In the <a href=\"https://www.pythoncheatsheet.org/blog/python-projects-with-poetry-and-vscode-part-1\">First Part</a>, we learned what the <code>pyproject.toml</code> file is and how to work with it, used <a href=\"https://poetry.eustace.io/\">Poetry</a> to start a new project, create a Virtual Environment and to add and remove dependencies. All of that with the following commands:</p>\n<table>\n<thead><tr>\n<th>Command</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>poetry new [package-name]</code></td>\n<td>Start a new Python Project.</td>\n</tr>\n<tr>\n<td><code>poetry init</code></td>\n<td>Create a <em>pyproject.toml</em> file interactively.</td>\n</tr>\n<tr>\n<td><code>poetry install</code></td>\n<td>Install the packages inside the <em>pyproject.toml</em> file.</td>\n</tr>\n<tr>\n<td><code>poetry add [package-name]</code></td>\n<td>Add a package to a Virtual Environment.</td>\n</tr>\n<tr>\n<td><code>poetry add -D [package-name]</code></td>\n<td>Add a dev package to a Virtual Environment.</td>\n</tr>\n<tr>\n<td><code>poetry remove [package-name]</code></td>\n<td>Remove a package from a Virtual Environment.</td>\n</tr>\n<tr>\n<td><code>poetry remove -D [package-name]</code></td>\n<td>Remove a dev package from a Virtual Environment.</td>\n</tr>\n</tbody>\n</table>\n<p>In this second part we'll:</p>\n<ul>\n<li>Add our virtual Environment to <a href=\"https://code.visualstudio.com/\">VSCode</a>.</li>\n<li>Update our dependencies.</li>\n<li>Integrate our dev dependencies with the editor:<ul>\n<li><em>Flake8</em></li>\n<li><em>Black</em></li>\n<li><em>Pytest</em></li>\n</ul>\n</li>\n</ul>\n<p>And in the third part we will:</p>\n<ul>\n<li>Write a sample library.</li>\n<li>Build our project with <em>Poetry</em>.</li>\n<li>Publish it on <em>PyPI</em>.</li>\n</ul>\n<p>Before we start, make sure you have installed <a href=\"https://code.visualstudio.com/\">VSCode</a>, added the <a href=\"https://marketplace.visualstudio.com/itemdetails?itemName=ms-python.python\">Python</a> extension and that you have followed and/or understood the <a href=\"https://www.pythoncheatsheet.org/blog/python-projects-with-poetry-and-vscode-part-1\">First Part</a> of this series.</p>\n<h2>Setting Up Poetry on VSCode</h2>\n<p>A few days have passed since the first part, so it may be a good idea to check for new versions of our dependencies. Open your terminal and navigate inside your project folder and type the <code>poetry update</code> command:</p>\n<p><img alt=\"poetry update\" src=\"https://raw.githubusercontent.com/wilfredinni/pysheetComments/master/2019/April/poetry_vscode_p2/img/update.png\" /></p>\n<p>Ok, to this day there are no new versions available.</p>\n<p>When you create a Virtual Environment with the <em>venv</em> command, <em>VSCode</em> will automatically set it as the default Python Environment for that project. When working With <em>Poetry</em>, the first time we will need to type the following in the terminal and inside the project folder:</p>\n<pre><code>$ poetry shell\n$ code .\n</code></pre>\n<p>The first command, <code>poetry shell</code>, will spawn us inside our virtual environment, and <code>code .</code> will open the current folder inside <em>VSCode</em>.</p>\n<p><img alt=\"vscode\" src=\"https://raw.githubusercontent.com/wilfredinni/pysheetComments/master/2019/April/poetry_vscode_p2/img/vscode.png\" /></p>\n<p>Open the <strong>how-long</strong> folder (or the one with your project name) using the left panel and alongside to <code>__init__.py</code>, create a <code>how-long.py</code> file. In the bottom left corner you'll see the current Python Environment:</p>\n<p><img alt=\"python version\" src=\"https://raw.githubusercontent.com/wilfredinni/pysheetComments/master/2019/April/poetry_vscode_p2/img/python-code.png\" /></p>\n<p>Click it and a list of available Environments will display. Choose the one that has the name of your project in it:</p>\n<p><img alt=\"choose python\" src=\"https://raw.githubusercontent.com/wilfredinni/pysheetComments/master/2019/April/poetry_vscode_p2/img/choose-environment.png\" /></p>\n<p>Now, let's integrate our dev dependencies, <em>Flake8</em>, <em>Black</em>, and <em>Pytest</em> into Visual Studio Code.</p>\n<h2>Flake8</h2>\n<p><a href=\"http://flake8.pycqa.org/en/latest/\">Flake8</a> will provide our projects with <em>linting</em> capabilities. In other words, warning of syntax and style errors, and thanks to VSCode, we will know them as we type.</p>\n<p>By default, the Python extension comes with <em>Pylint</em> enabled, which is powerful but complex to configure. To switch to <em>Flake8</em> make a change to any Python file and save it, in the bottom right corner a popup message will show:</p>\n<p><img alt=\"flake8\" src=\"https://raw.githubusercontent.com/wilfredinni/pysheetComments/master/2019/April/poetry_vscode_p2/img/select-linter.png\" /></p>\n<p>Click on <strong>Select Linter</strong> and choose <strong>Flake8</strong> from the list. Now, <em>VSCode</em> will tell us our <em>syntax</em> and <em>style</em> problems, in green or red depending on its severity, always with a nice description of what is wrong:</p>\n<p><img alt=\"linting\" src=\"https://raw.githubusercontent.com/wilfredinni/pysheetComments/master/2019/April/poetry_vscode_p2/img/linting.png\" /></p>\n<p>Seems like we have two problems: we are missing a blank line at the end of our file (style) and forgot to add quotes to our <em>Hello, World!</em> string (syntax). Fix them and see all warnings disappear.</p>\n<h2>Black</h2>\n<p><a href=\"https://github.com/ambv/black\">Black</a> is a code formatter, a tool that will look at our code and automatically format it in compliance with the <a href=\"https://www.python.org/dev/peps/pep-0008/\">PEP 8</a> style guide, the same <em>PEP</em> that uses <em>Flake8</em> to lint our style errors.</p>\n<p>Hold <code>shift + cmd/ctrl + p</code> to open the Command Palette, type <strong>Format Document</strong>, and press enter. A new popup message will appear:</p>\n<p><img alt=\"black formatter popup\" src=\"https://raw.githubusercontent.com/wilfredinni/pysheetComments/master/2019/April/poetry_vscode_p2/img/format-popup.png\" /></p>\n<p>Select <strong>Use Black</strong>. Now copy this poorly formatted code into your python file:</p>\n<pre><code class=\"lang-python\">for i in range(5):         # this comment has too many spaces\n      print(i)  # this line has 6 space indentation.\n</code></pre>\n<p>What an ugly piece of s<em>**... code. Try formatting it again and see how </em>Black* fixes all of them for you!</p>\n<p>Another thing we can do is configure VSCode so that every time we save, <em>Black</em> will automatically format our code. Hold <code>cmd/ctrl + ,</code> to open the Settings. Make sure you are in the <strong>Workspace Settings</strong>, search for <strong>Format On Save</strong> and activate the checkbox:</p>\n<p><img alt=\"format on save\" src=\"https://raw.githubusercontent.com/wilfredinni/pysheetComments/master/2019/April/poetry_vscode_p2/img/format-on-save.png\" /></p>\n<p>Lastly, <em>Black</em> defaults to 88 characters per line in contrast with the 80 allowed by <em>Flake8</em>, so to avoid conflicts, open the <strong>.vscode</strong> folder and add the following at the end of the <strong>settings.json</strong> file:</p>\n<pre><code class=\"lang-json\">{\n    ...\n    &quot;python.linting.flake8Args&quot;: [\n        &quot;--max-line-length=88&quot;\n    ],\n}\n</code></pre>\n<p><img alt=\"black-settings\" src=\"https://raw.githubusercontent.com/wilfredinni/pysheetComments/master/2019/April/poetry_vscode_p2/img/black-settings.png\" /></p>\n<h2>Pytest</h2>\n<p>If you are serious about programming, it is crucial for you to learn how to test your projects. It's an incredibly useful skill that will allow you to write and deliver programs with confidence by reducing the possibility of catastrophic bugs appearing after shipping.</p>\n<p><a href=\"https://docs.pytest.org/en/latest/\">Pytest</a> is a very popular and user-friendly framework for writing tests. We <a href=\"https://www.pythoncheatsheet.org/blog/python-projects-with-poetry-and-vscode-part-1#Dependency-Management\">already installed it</a>, so we will also integrate it with <em>VSCode</em>.</p>\n<p>Open the <strong>tests</strong> folder and select the <code>test_how_long.py</code> file. <em>Poetry</em> already gives us our first test:</p>\n<pre><code class=\"lang-python\"># test_how_long.py\nfrom how_long import __version__\n\n\ndef test_version():\n    assert __version__ == '0.1.0'\n</code></pre>\n<p>This test import the <code>__version__</code> variable from the <code>__init__.py</code> file that is inside the <strong>how_long</strong> folder and asserts that the current version is <em>0.1.0</em>. Open the integrated terminal by going to <strong>Terminal &gt; New Terminal</strong> and type:</p>\n<pre><code>$ pytest\n</code></pre>\n<p>The Output will look like this:</p>\n<p><img alt=\"pytest\" src=\"https://raw.githubusercontent.com/wilfredinni/pysheetComments/master/2019/April/poetry_vscode_p2/img/pytest-terminal.png\" /></p>\n<p>Ok, everything is fine. Open your Command Palette with <code>shift + cmd/ctrl + p</code>:</p>\n<ul>\n<li>Write <strong>unit</strong> and select <strong>Python: Configure Unit Tests</strong>.</li>\n<li>Select <strong>pytest</strong>.</li>\n<li>Choose the directory in which the tests are stored, <strong>tests</strong> in our case.</li>\n</ul>\n<p>Three things happened:</p>\n<ul>\n<li><p>A new button appeared at the status bar: <strong>Run Tests</strong>. This is the same as typing <em>pytest</em> in the terminal. Press it and select <strong>Run All Unit Tests</strong>. When finished, it will inform you the number of tests that passed and the tests that not:</p>\n<p><img alt=\"test status bar\" src=\"https://raw.githubusercontent.com/wilfredinni/pysheetComments/master/2019/April/poetry_vscode_p2/img/test-statusbar.png\" /></p>\n</li>\n<li><p>A new icon at the left bar. If you click on it a panel displaying all the test will appear. Here, you can run each one individually:</p>\n<p><img alt=\"test side panel\" src=\"https://raw.githubusercontent.com/wilfredinni/pysheetComments/master/2019/April/poetry_vscode_p2/img/test-side-panel.png\" /></p>\n</li>\n<li><p>Inside the test file, new options will be displayed before every test function: a check icon will appear if is ok, and an <em>x</em> otherwise. It also allows you to run specific tests:</p>\n<p><img alt=\"test inline\" src=\"https://raw.githubusercontent.com/wilfredinni/pysheetComments/master/2019/April/poetry_vscode_p2/img/test-inline.png\" /></p>\n</li>\n</ul>\n<h2>Conclusion</h2>\n<p>So far we have:</p>\n<ul>\n<li><a href=\"https://www.pythoncheatsheet.org/blog/python-projects-with-poetry-and-vscode-part-1#Starting-a-New-Project\">Started a new project</a>.</li>\n<li><a href=\"https://www.pythoncheatsheet.org/blog/python-projects-with-poetry-and-vscode-part-1#Creating-a-Virtual-Environment\">Created a Virtual Environment</a> with <em>Poetry</em>.</li>\n<li><a href=\"https://www.pythoncheatsheet.org/blog/python-projects-with-poetry-and-vscode-part-1#Dependency-Management\">Added, Deleted and Updated</a> dependencies.</li>\n<li>Added our <a href=\"https://www.pythoncheatsheet.org/latest/feed/#Setting-Up-Poetry-on-VSCode\">Virtual Environment to VSCode</a>.</li>\n<li><a href=\"https://www.pythoncheatsheet.org/latest/feed/#Flake8\">Configured <em>Flake8</em></a> to <em>lint</em> our code as we type.</li>\n<li>Choose <a href=\"https://www.pythoncheatsheet.org/latest/feed/#Black\"><em>Black</em></a> as the formatter of our project.</li>\n<li>And <a href=\"https://www.pythoncheatsheet.org/latest/feed/#Pytest\">included <em>Pytest</em></a> to run our tests in a visual way.</li>\n</ul>\n<p>In the <a href=\"https://www.pythoncheatsheet.org/blog/python-projects-with-poetry-and-vscode-part-3\">third</a> and last part we will:</p>\n<ul>\n<li>Write a sample library.</li>\n<li>Build our project with <em>Poetry</em>.</li>\n<li>Publish it on <em>PyPI</em>.</li>\n</ul>\n<p>That's it, Have a nice day!</p>",
            "summary_detail": {
                "type": "text/html",
                "language": null,
                "base": "https://www.pythoncheatsheet.org/latest/feed/",
                "value": "<p>In the <a href=\"https://www.pythoncheatsheet.org/blog/python-projects-with-poetry-and-vscode-part-1\">First Part</a>, we learned what the <code>pyproject.toml</code> file is and how to work with it, used <a href=\"https://poetry.eustace.io/\">Poetry</a> to start a new project, create a Virtual Environment and to add and remove dependencies. All of that with the following commands:</p>\n<table>\n<thead><tr>\n<th>Command</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>poetry new [package-name]</code></td>\n<td>Start a new Python Project.</td>\n</tr>\n<tr>\n<td><code>poetry init</code></td>\n<td>Create a <em>pyproject.toml</em> file interactively.</td>\n</tr>\n<tr>\n<td><code>poetry install</code></td>\n<td>Install the packages inside the <em>pyproject.toml</em> file.</td>\n</tr>\n<tr>\n<td><code>poetry add [package-name]</code></td>\n<td>Add a package to a Virtual Environment.</td>\n</tr>\n<tr>\n<td><code>poetry add -D [package-name]</code></td>\n<td>Add a dev package to a Virtual Environment.</td>\n</tr>\n<tr>\n<td><code>poetry remove [package-name]</code></td>\n<td>Remove a package from a Virtual Environment.</td>\n</tr>\n<tr>\n<td><code>poetry remove -D [package-name]</code></td>\n<td>Remove a dev package from a Virtual Environment.</td>\n</tr>\n</tbody>\n</table>\n<p>In this second part we'll:</p>\n<ul>\n<li>Add our virtual Environment to <a href=\"https://code.visualstudio.com/\">VSCode</a>.</li>\n<li>Update our dependencies.</li>\n<li>Integrate our dev dependencies with the editor:<ul>\n<li><em>Flake8</em></li>\n<li><em>Black</em></li>\n<li><em>Pytest</em></li>\n</ul>\n</li>\n</ul>\n<p>And in the third part we will:</p>\n<ul>\n<li>Write a sample library.</li>\n<li>Build our project with <em>Poetry</em>.</li>\n<li>Publish it on <em>PyPI</em>.</li>\n</ul>\n<p>Before we start, make sure you have installed <a href=\"https://code.visualstudio.com/\">VSCode</a>, added the <a href=\"https://marketplace.visualstudio.com/itemdetails?itemName=ms-python.python\">Python</a> extension and that you have followed and/or understood the <a href=\"https://www.pythoncheatsheet.org/blog/python-projects-with-poetry-and-vscode-part-1\">First Part</a> of this series.</p>\n<h2>Setting Up Poetry on VSCode</h2>\n<p>A few days have passed since the first part, so it may be a good idea to check for new versions of our dependencies. Open your terminal and navigate inside your project folder and type the <code>poetry update</code> command:</p>\n<p><img alt=\"poetry update\" src=\"https://raw.githubusercontent.com/wilfredinni/pysheetComments/master/2019/April/poetry_vscode_p2/img/update.png\" /></p>\n<p>Ok, to this day there are no new versions available.</p>\n<p>When you create a Virtual Environment with the <em>venv</em> command, <em>VSCode</em> will automatically set it as the default Python Environment for that project. When working With <em>Poetry</em>, the first time we will need to type the following in the terminal and inside the project folder:</p>\n<pre><code>$ poetry shell\n$ code .\n</code></pre>\n<p>The first command, <code>poetry shell</code>, will spawn us inside our virtual environment, and <code>code .</code> will open the current folder inside <em>VSCode</em>.</p>\n<p><img alt=\"vscode\" src=\"https://raw.githubusercontent.com/wilfredinni/pysheetComments/master/2019/April/poetry_vscode_p2/img/vscode.png\" /></p>\n<p>Open the <strong>how-long</strong> folder (or the one with your project name) using the left panel and alongside to <code>__init__.py</code>, create a <code>how-long.py</code> file. In the bottom left corner you'll see the current Python Environment:</p>\n<p><img alt=\"python version\" src=\"https://raw.githubusercontent.com/wilfredinni/pysheetComments/master/2019/April/poetry_vscode_p2/img/python-code.png\" /></p>\n<p>Click it and a list of available Environments will display. Choose the one that has the name of your project in it:</p>\n<p><img alt=\"choose python\" src=\"https://raw.githubusercontent.com/wilfredinni/pysheetComments/master/2019/April/poetry_vscode_p2/img/choose-environment.png\" /></p>\n<p>Now, let's integrate our dev dependencies, <em>Flake8</em>, <em>Black</em>, and <em>Pytest</em> into Visual Studio Code.</p>\n<h2>Flake8</h2>\n<p><a href=\"http://flake8.pycqa.org/en/latest/\">Flake8</a> will provide our projects with <em>linting</em> capabilities. In other words, warning of syntax and style errors, and thanks to VSCode, we will know them as we type.</p>\n<p>By default, the Python extension comes with <em>Pylint</em> enabled, which is powerful but complex to configure. To switch to <em>Flake8</em> make a change to any Python file and save it, in the bottom right corner a popup message will show:</p>\n<p><img alt=\"flake8\" src=\"https://raw.githubusercontent.com/wilfredinni/pysheetComments/master/2019/April/poetry_vscode_p2/img/select-linter.png\" /></p>\n<p>Click on <strong>Select Linter</strong> and choose <strong>Flake8</strong> from the list. Now, <em>VSCode</em> will tell us our <em>syntax</em> and <em>style</em> problems, in green or red depending on its severity, always with a nice description of what is wrong:</p>\n<p><img alt=\"linting\" src=\"https://raw.githubusercontent.com/wilfredinni/pysheetComments/master/2019/April/poetry_vscode_p2/img/linting.png\" /></p>\n<p>Seems like we have two problems: we are missing a blank line at the end of our file (style) and forgot to add quotes to our <em>Hello, World!</em> string (syntax). Fix them and see all warnings disappear.</p>\n<h2>Black</h2>\n<p><a href=\"https://github.com/ambv/black\">Black</a> is a code formatter, a tool that will look at our code and automatically format it in compliance with the <a href=\"https://www.python.org/dev/peps/pep-0008/\">PEP 8</a> style guide, the same <em>PEP</em> that uses <em>Flake8</em> to lint our style errors.</p>\n<p>Hold <code>shift + cmd/ctrl + p</code> to open the Command Palette, type <strong>Format Document</strong>, and press enter. A new popup message will appear:</p>\n<p><img alt=\"black formatter popup\" src=\"https://raw.githubusercontent.com/wilfredinni/pysheetComments/master/2019/April/poetry_vscode_p2/img/format-popup.png\" /></p>\n<p>Select <strong>Use Black</strong>. Now copy this poorly formatted code into your python file:</p>\n<pre><code class=\"lang-python\">for i in range(5):         # this comment has too many spaces\n      print(i)  # this line has 6 space indentation.\n</code></pre>\n<p>What an ugly piece of s<em>**... code. Try formatting it again and see how </em>Black* fixes all of them for you!</p>\n<p>Another thing we can do is configure VSCode so that every time we save, <em>Black</em> will automatically format our code. Hold <code>cmd/ctrl + ,</code> to open the Settings. Make sure you are in the <strong>Workspace Settings</strong>, search for <strong>Format On Save</strong> and activate the checkbox:</p>\n<p><img alt=\"format on save\" src=\"https://raw.githubusercontent.com/wilfredinni/pysheetComments/master/2019/April/poetry_vscode_p2/img/format-on-save.png\" /></p>\n<p>Lastly, <em>Black</em> defaults to 88 characters per line in contrast with the 80 allowed by <em>Flake8</em>, so to avoid conflicts, open the <strong>.vscode</strong> folder and add the following at the end of the <strong>settings.json</strong> file:</p>\n<pre><code class=\"lang-json\">{\n    ...\n    &quot;python.linting.flake8Args&quot;: [\n        &quot;--max-line-length=88&quot;\n    ],\n}\n</code></pre>\n<p><img alt=\"black-settings\" src=\"https://raw.githubusercontent.com/wilfredinni/pysheetComments/master/2019/April/poetry_vscode_p2/img/black-settings.png\" /></p>\n<h2>Pytest</h2>\n<p>If you are serious about programming, it is crucial for you to learn how to test your projects. It's an incredibly useful skill that will allow you to write and deliver programs with confidence by reducing the possibility of catastrophic bugs appearing after shipping.</p>\n<p><a href=\"https://docs.pytest.org/en/latest/\">Pytest</a> is a very popular and user-friendly framework for writing tests. We <a href=\"https://www.pythoncheatsheet.org/blog/python-projects-with-poetry-and-vscode-part-1#Dependency-Management\">already installed it</a>, so we will also integrate it with <em>VSCode</em>.</p>\n<p>Open the <strong>tests</strong> folder and select the <code>test_how_long.py</code> file. <em>Poetry</em> already gives us our first test:</p>\n<pre><code class=\"lang-python\"># test_how_long.py\nfrom how_long import __version__\n\n\ndef test_version():\n    assert __version__ == '0.1.0'\n</code></pre>\n<p>This test import the <code>__version__</code> variable from the <code>__init__.py</code> file that is inside the <strong>how_long</strong> folder and asserts that the current version is <em>0.1.0</em>. Open the integrated terminal by going to <strong>Terminal &gt; New Terminal</strong> and type:</p>\n<pre><code>$ pytest\n</code></pre>\n<p>The Output will look like this:</p>\n<p><img alt=\"pytest\" src=\"https://raw.githubusercontent.com/wilfredinni/pysheetComments/master/2019/April/poetry_vscode_p2/img/pytest-terminal.png\" /></p>\n<p>Ok, everything is fine. Open your Command Palette with <code>shift + cmd/ctrl + p</code>:</p>\n<ul>\n<li>Write <strong>unit</strong> and select <strong>Python: Configure Unit Tests</strong>.</li>\n<li>Select <strong>pytest</strong>.</li>\n<li>Choose the directory in which the tests are stored, <strong>tests</strong> in our case.</li>\n</ul>\n<p>Three things happened:</p>\n<ul>\n<li><p>A new button appeared at the status bar: <strong>Run Tests</strong>. This is the same as typing <em>pytest</em> in the terminal. Press it and select <strong>Run All Unit Tests</strong>. When finished, it will inform you the number of tests that passed and the tests that not:</p>\n<p><img alt=\"test status bar\" src=\"https://raw.githubusercontent.com/wilfredinni/pysheetComments/master/2019/April/poetry_vscode_p2/img/test-statusbar.png\" /></p>\n</li>\n<li><p>A new icon at the left bar. If you click on it a panel displaying all the test will appear. Here, you can run each one individually:</p>\n<p><img alt=\"test side panel\" src=\"https://raw.githubusercontent.com/wilfredinni/pysheetComments/master/2019/April/poetry_vscode_p2/img/test-side-panel.png\" /></p>\n</li>\n<li><p>Inside the test file, new options will be displayed before every test function: a check icon will appear if is ok, and an <em>x</em> otherwise. It also allows you to run specific tests:</p>\n<p><img alt=\"test inline\" src=\"https://raw.githubusercontent.com/wilfredinni/pysheetComments/master/2019/April/poetry_vscode_p2/img/test-inline.png\" /></p>\n</li>\n</ul>\n<h2>Conclusion</h2>\n<p>So far we have:</p>\n<ul>\n<li><a href=\"https://www.pythoncheatsheet.org/blog/python-projects-with-poetry-and-vscode-part-1#Starting-a-New-Project\">Started a new project</a>.</li>\n<li><a href=\"https://www.pythoncheatsheet.org/blog/python-projects-with-poetry-and-vscode-part-1#Creating-a-Virtual-Environment\">Created a Virtual Environment</a> with <em>Poetry</em>.</li>\n<li><a href=\"https://www.pythoncheatsheet.org/blog/python-projects-with-poetry-and-vscode-part-1#Dependency-Management\">Added, Deleted and Updated</a> dependencies.</li>\n<li>Added our <a href=\"https://www.pythoncheatsheet.org/latest/feed/#Setting-Up-Poetry-on-VSCode\">Virtual Environment to VSCode</a>.</li>\n<li><a href=\"https://www.pythoncheatsheet.org/latest/feed/#Flake8\">Configured <em>Flake8</em></a> to <em>lint</em> our code as we type.</li>\n<li>Choose <a href=\"https://www.pythoncheatsheet.org/latest/feed/#Black\"><em>Black</em></a> as the formatter of our project.</li>\n<li>And <a href=\"https://www.pythoncheatsheet.org/latest/feed/#Pytest\">included <em>Pytest</em></a> to run our tests in a visual way.</li>\n</ul>\n<p>In the <a href=\"https://www.pythoncheatsheet.org/blog/python-projects-with-poetry-and-vscode-part-3\">third</a> and last part we will:</p>\n<ul>\n<li>Write a sample library.</li>\n<li>Build our project with <em>Poetry</em>.</li>\n<li>Publish it on <em>PyPI</em>.</li>\n</ul>\n<p>That's it, Have a nice day!</p>"
            },
            "id": "http://www.pythoncheatsheet.org/blog/python-projects-with-poetry-and-vscode-part-2/",
            "guidislink": false
        },
        {
            "title": "Python projects with Poetry and VSCode. Part 1",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://www.pythoncheatsheet.org/latest/feed/",
                "value": "Python projects with Poetry and VSCode. Part 1"
            },
            "links": [
                {
                    "rel": "alternate",
                    "type": "text/html",
                    "href": "http://www.pythoncheatsheet.org/blog/python-projects-with-poetry-and-vscode-part-1/"
                }
            ],
            "link": "http://www.pythoncheatsheet.org/blog/python-projects-with-poetry-and-vscode-part-1/",
            "summary": "<blockquote><p>Updates:</p>\n<ul>\n<li>18-05-2019: <a href=\"https://www.pythoncheatsheet.org/latest/feed/#Installing-Poetry\">Installing Poetry</a>.</li>\n</ul>\n</blockquote>\n<p>A Virtual Environment is an isolated Python installation designed to avoid filling our base one with libraries we might use for only one project. It also allows us to manage multiple versions of the same package in different projects. We could, for example, need Django 2.2 for one and 1.9 in other.</p>\n<p>Poetry on the other hand:</p>\n<blockquote><p><code>poetry</code> is a tool to handle dependency installation as well as building and packaging of Python packages. It only needs one file to do all of that: the new, <a href=\"https://www.python.org/dev/peps/pep-0518/\">standardized</a> <code>pyproject.toml</code>.</p>\n<p>In other words, poetry uses <code>pyproject.toml</code> to replace <code>setup.py</code>, <code>requirements.txt</code>, <code>setup.cfg</code>, <code>MANIFEST.in</code> and the newly added <code>Pipfile</code>.</p>\n</blockquote>\n<p>In this series of articles, we'll use <a href=\"https://poetry.eustace.io/\">Poetry</a> to manage our dependencies, build a simple project and, with a single command, publish it on <a href=\"https://pypi.org/\">PyPI</a>.</p>\n<p>In this first part we will:</p>\n<ul>\n<li>Start a new project.</li>\n<li>Create a Virtual Environment.</li>\n<li>Manage dependencies.</li>\n</ul>\n<p>In the <a href=\"https://www.pythoncheatsheet.org/blog/python-projects-with-poetry-and-vscode-part-2\">Second Part</a> we'll:</p>\n<ul>\n<li>Add our virtual Environment to <a href=\"https://code.visualstudio.com/\">VSCode</a>.</li>\n<li>Integrate our dev dependencies with the editor.<ul>\n<li><em>Flake8</em></li>\n<li><em>Black</em></li>\n<li><em>Pytest</em></li>\n</ul>\n</li>\n</ul>\n<p>And finally, in a <a href=\"https://www.pythoncheatsheet.org/blog/python-projects-with-poetry-and-vscode-part-3\">third</a> part we'll:</p>\n<ul>\n<li>Write a sample library.</li>\n<li>Build our project with <em>Poetry</em>.</li>\n<li>Publish it on <em>PyPI</em>.</li>\n</ul>\n<h2>Installing Poetry</h2>\n<p>The easiest way is to use <em>pip</em>:</p>\n<pre><code>$ pip install poetry\n</code></pre>\n<p>But we will use Poetry own installer to isolate it from the rest of the system by vendorizing its dependencies. This is the recommended way of installing poetry:</p>\n<pre><code>$ curl -SSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py | python\n</code></pre>\n<p>If installed this way, you will later be able to update poetry to the latest stable version with the <code>poetry self:update</code> command.</p>\n<h2>Starting a New Project</h2>\n<p>We can now start a new Python project by using the <code>poetry new [project_name]</code> command. I will call it <strong><em>how-long</em></strong> and is going to be a very simple library to measure a function execution time:</p>\n<pre><code>$ poetry new how-long\n</code></pre>\n<blockquote><p>Note: For existing projects, you can use the <code>poetry init</code> command and interactively create a <em>pyproject.toml</em>.</p>\n</blockquote>\n<p>The directory <em>how-long</em> is created and inside is a basic project structure:</p>\n<pre><code>how-long\n\u251c\u2500\u2500 README.rst\n\u251c\u2500\u2500 how_long\n\u2502   \u2514\u2500\u2500 __init__.py\n\u251c\u2500\u2500 pyproject.toml\n\u2514\u2500\u2500 tests\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 test_how_long.py\n</code></pre>\n<blockquote><p>Note: To be able to publish your project, you need an available name. Use the <a href=\"https://pypi.org/\">PyPI</a> search tool for this.</p>\n</blockquote>\n<h3>The pyproject.toml File</h3>\n<p>The <strong>pyproject.toml</strong> file will manage the details and dependencies of the project:</p>\n<pre><code>[tool.poetry]\nname = \"how-long\"\nversion = \"0.1.0\"\ndescription = \"A simple decorator to measure a function execution time.\"\nauthors = [\"wilfredinni &lt;carlos.w.montecinos@gmail.com&gt;\"]\n\n[tool.poetry.dependencies]\npython = \"^3.7\"\n\n[tool.poetry.dev-dependencies]\npytest = \"^3.0\"\n\n[build-system]\nrequires = [\"poetry&gt;=0.12\"]\nbuild-backend = \"poetry.masonry.api\"\n</code></pre>\n<h4>[tool.poetry]</h4>\n<p>The details. Adding a <a href=\"https://poetry.eustace.io/docs/pyproject/#license\">license</a> and a <a href=\"https://poetry.eustace.io/docs/pyproject/#readme\">README</a> might be a good idea:</p>\n<pre><code>[tool.poetry]\n...\nlicense = \"MIT\"\nreadme = \"README.rst\"\n</code></pre>\n<h4>[tool.poetry.dependencies]</h4>\n<p>First is the Python version. Basically, this project will be compatible with Python 3.7 and up. Also, from now on, every package we install that is meant to be used in production will be listed here.</p>\n<h4>[tool.poetry.dev-dependencies]</h4>\n<p>These packages are only for development and will not be included when we publish our project. By default, Poetry includes <a href=\"https://docs.pytest.org/en/latest/\">Pytest</a>, so we will use it to test our project later on.</p>\n<h2>Creating a Virtual Environment</h2>\n<p>Now, let's create a Virtual Environment and install <em>Pytest</em> with the <code>poetry install</code> command:</p>\n<pre><code>$ poetry install\n</code></pre>\n<p><img alt=\"poetry-install-command\" src=\"https://raw.githubusercontent.com/wilfredinni/pysheetComments/master/2019/April/poetry_vscode_p1/poetry-install.png\" /></p>\n<p>After is done, a new file, <code>poetry.lock</code> will be created.</p>\n<blockquote><p>When Poetry has finished installing, it writes all the packages and the exact versions of them that it downloaded to the poetry.lock file, locking the project to those specific versions. You should commit the poetry.lock file to your project repo so that all people working on the project are locked to the same versions of dependencies.</p>\n</blockquote>\n<h2>Dependency Management</h2>\n<p>One way to add or remove dependencies is to directly edit <em>pyproject.toml</em> and then run <code>poetry install</code> to apply the changes. We will instead use the <code>add</code> and <code>remove</code> commands to avoid manual modifications.</p>\n<h3>Adding Dependencies</h3>\n<p>Let's add two packages to the project, <em>pendulum</em> and <em>coo</em>:</p>\n<pre><code>$ poetry add pendulum coo\n</code></pre>\n<p><img alt=\"poetry-add-command\" src=\"https://raw.githubusercontent.com/wilfredinni/pysheetComments/master/2019/April/poetry_vscode_p1/poetry-add.png\" /></p>\n<p>Open <em>pyproject.toml</em> and <em>poetry.lock</em> and see how they have updated.</p>\n<h3>Adding Dev Dependencies</h3>\n<p>These dependencies will be available only during development, Poetry will not include them when building and publishing the project.</p>\n<p>We already installed <em>Pytest</em>, but we will also use <a href=\"http://flake8.pycqa.org/en/latest/\">flake8</a> for linting and <a href=\"http://mypy-lang.org/\">mypy</a> for static typing:</p>\n<pre><code>$ poetry add -D flake8 mypy\n</code></pre>\n<p>Now that I think about it, I forgot to add a formatter. We'll go with <a href=\"https://black.readthedocs.io/en/stable/\">black</a>:</p>\n<pre><code>$ poetry add -D black\n[ValueError]\nCould not find a matching version of package black\n\nadd [-D|--dev] [--git GIT] [--path PATH] [-E|--extras EXTRAS] [--optional] [--python PYTHON] [--platform PLATFORM] [--allow-prereleases] [--dry-run] [--] &lt;name&gt; (&lt;name&gt;)...\n</code></pre>\n<p>This error happens because <em>black</em> is in a pre-release state, so Poetry cannot find any stable version for us. But I really want it so let's install it anyway using the <code>--allow-prereleases</code> flag:</p>\n<pre><code>$ poetry add -D black --allow-prereleases\n</code></pre>\n<p><img alt=\"poetry-add-dev-command\" src=\"https://raw.githubusercontent.com/wilfredinni/pysheetComments/master/2019/April/poetry_vscode_p1/poetry-add-dev.png\" /></p>\n<h3>Removing Dependencies</h3>\n<p>You know what, I changed my mind, this project will use nor <em>coo</em> nor <em>mypy</em>. Start by removing <em>coo</em>, a normal dependency of our project:</p>\n<pre><code>$ poetry remove coo\n</code></pre>\n<p>Now <em>mypy</em> which is a dev dependency:</p>\n<pre><code>$ poetry remove -D mypy\n</code></pre>\n<h2>Conclusion</h2>\n<p>In this first part, we have started a new project, created a Virtual Environment and added and removed dependencies by using the following commands:</p>\n<table>\n<thead><tr>\n<th>Command</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>poetry new [package-name]</code></td>\n<td>Start a new Python Project.</td>\n</tr>\n<tr>\n<td><code>poetry init</code></td>\n<td>Create a <em>pyproject.toml</em> file interactively.</td>\n</tr>\n<tr>\n<td><code>poetry install</code></td>\n<td>Install the packages inside the <em>pyproject.toml</em> file.</td>\n</tr>\n<tr>\n<td><code>poetry add [package-name]</code></td>\n<td>Add a package to a Virtual Environment.</td>\n</tr>\n<tr>\n<td><code>poetry add -D [package-name]</code></td>\n<td>Add a dev package to a Virtual Environment.</td>\n</tr>\n<tr>\n<td><code>poetry remove [package-name]</code></td>\n<td>Remove a package from a Virtual Environment.</td>\n</tr>\n<tr>\n<td><code>poetry remove -D [package-name]</code></td>\n<td>Remove a dev package from a Virtual Environment.</td>\n</tr>\n<tr>\n<td><code>poetry self:update</code></td>\n<td>Update poetry to the latest stable version.</td>\n</tr>\n</tbody>\n</table>\n<p>In the <a href=\"https://www.pythoncheatsheet.org/blog/python-projects-with-poetry-and-vscode-part-2\">Second Part</a>, we will see more <em>Poetry</em> commands, add our Virtual Environment to <em>VSCode</em> and use the dev packages we installed to lint (Flake8), format (Black) and test (Pytest) our code inside the editor. Finally, in a third one, we will write and publish a sample library to <em>PyPI</em>.</p>\n<p>Any doubt or suggestion? Please leave a comment.</p>",
            "summary_detail": {
                "type": "text/html",
                "language": null,
                "base": "https://www.pythoncheatsheet.org/latest/feed/",
                "value": "<blockquote><p>Updates:</p>\n<ul>\n<li>18-05-2019: <a href=\"https://www.pythoncheatsheet.org/latest/feed/#Installing-Poetry\">Installing Poetry</a>.</li>\n</ul>\n</blockquote>\n<p>A Virtual Environment is an isolated Python installation designed to avoid filling our base one with libraries we might use for only one project. It also allows us to manage multiple versions of the same package in different projects. We could, for example, need Django 2.2 for one and 1.9 in other.</p>\n<p>Poetry on the other hand:</p>\n<blockquote><p><code>poetry</code> is a tool to handle dependency installation as well as building and packaging of Python packages. It only needs one file to do all of that: the new, <a href=\"https://www.python.org/dev/peps/pep-0518/\">standardized</a> <code>pyproject.toml</code>.</p>\n<p>In other words, poetry uses <code>pyproject.toml</code> to replace <code>setup.py</code>, <code>requirements.txt</code>, <code>setup.cfg</code>, <code>MANIFEST.in</code> and the newly added <code>Pipfile</code>.</p>\n</blockquote>\n<p>In this series of articles, we'll use <a href=\"https://poetry.eustace.io/\">Poetry</a> to manage our dependencies, build a simple project and, with a single command, publish it on <a href=\"https://pypi.org/\">PyPI</a>.</p>\n<p>In this first part we will:</p>\n<ul>\n<li>Start a new project.</li>\n<li>Create a Virtual Environment.</li>\n<li>Manage dependencies.</li>\n</ul>\n<p>In the <a href=\"https://www.pythoncheatsheet.org/blog/python-projects-with-poetry-and-vscode-part-2\">Second Part</a> we'll:</p>\n<ul>\n<li>Add our virtual Environment to <a href=\"https://code.visualstudio.com/\">VSCode</a>.</li>\n<li>Integrate our dev dependencies with the editor.<ul>\n<li><em>Flake8</em></li>\n<li><em>Black</em></li>\n<li><em>Pytest</em></li>\n</ul>\n</li>\n</ul>\n<p>And finally, in a <a href=\"https://www.pythoncheatsheet.org/blog/python-projects-with-poetry-and-vscode-part-3\">third</a> part we'll:</p>\n<ul>\n<li>Write a sample library.</li>\n<li>Build our project with <em>Poetry</em>.</li>\n<li>Publish it on <em>PyPI</em>.</li>\n</ul>\n<h2>Installing Poetry</h2>\n<p>The easiest way is to use <em>pip</em>:</p>\n<pre><code>$ pip install poetry\n</code></pre>\n<p>But we will use Poetry own installer to isolate it from the rest of the system by vendorizing its dependencies. This is the recommended way of installing poetry:</p>\n<pre><code>$ curl -SSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py | python\n</code></pre>\n<p>If installed this way, you will later be able to update poetry to the latest stable version with the <code>poetry self:update</code> command.</p>\n<h2>Starting a New Project</h2>\n<p>We can now start a new Python project by using the <code>poetry new [project_name]</code> command. I will call it <strong><em>how-long</em></strong> and is going to be a very simple library to measure a function execution time:</p>\n<pre><code>$ poetry new how-long\n</code></pre>\n<blockquote><p>Note: For existing projects, you can use the <code>poetry init</code> command and interactively create a <em>pyproject.toml</em>.</p>\n</blockquote>\n<p>The directory <em>how-long</em> is created and inside is a basic project structure:</p>\n<pre><code>how-long\n\u251c\u2500\u2500 README.rst\n\u251c\u2500\u2500 how_long\n\u2502   \u2514\u2500\u2500 __init__.py\n\u251c\u2500\u2500 pyproject.toml\n\u2514\u2500\u2500 tests\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 test_how_long.py\n</code></pre>\n<blockquote><p>Note: To be able to publish your project, you need an available name. Use the <a href=\"https://pypi.org/\">PyPI</a> search tool for this.</p>\n</blockquote>\n<h3>The pyproject.toml File</h3>\n<p>The <strong>pyproject.toml</strong> file will manage the details and dependencies of the project:</p>\n<pre><code>[tool.poetry]\nname = \"how-long\"\nversion = \"0.1.0\"\ndescription = \"A simple decorator to measure a function execution time.\"\nauthors = [\"wilfredinni &lt;carlos.w.montecinos@gmail.com&gt;\"]\n\n[tool.poetry.dependencies]\npython = \"^3.7\"\n\n[tool.poetry.dev-dependencies]\npytest = \"^3.0\"\n\n[build-system]\nrequires = [\"poetry&gt;=0.12\"]\nbuild-backend = \"poetry.masonry.api\"\n</code></pre>\n<h4>[tool.poetry]</h4>\n<p>The details. Adding a <a href=\"https://poetry.eustace.io/docs/pyproject/#license\">license</a> and a <a href=\"https://poetry.eustace.io/docs/pyproject/#readme\">README</a> might be a good idea:</p>\n<pre><code>[tool.poetry]\n...\nlicense = \"MIT\"\nreadme = \"README.rst\"\n</code></pre>\n<h4>[tool.poetry.dependencies]</h4>\n<p>First is the Python version. Basically, this project will be compatible with Python 3.7 and up. Also, from now on, every package we install that is meant to be used in production will be listed here.</p>\n<h4>[tool.poetry.dev-dependencies]</h4>\n<p>These packages are only for development and will not be included when we publish our project. By default, Poetry includes <a href=\"https://docs.pytest.org/en/latest/\">Pytest</a>, so we will use it to test our project later on.</p>\n<h2>Creating a Virtual Environment</h2>\n<p>Now, let's create a Virtual Environment and install <em>Pytest</em> with the <code>poetry install</code> command:</p>\n<pre><code>$ poetry install\n</code></pre>\n<p><img alt=\"poetry-install-command\" src=\"https://raw.githubusercontent.com/wilfredinni/pysheetComments/master/2019/April/poetry_vscode_p1/poetry-install.png\" /></p>\n<p>After is done, a new file, <code>poetry.lock</code> will be created.</p>\n<blockquote><p>When Poetry has finished installing, it writes all the packages and the exact versions of them that it downloaded to the poetry.lock file, locking the project to those specific versions. You should commit the poetry.lock file to your project repo so that all people working on the project are locked to the same versions of dependencies.</p>\n</blockquote>\n<h2>Dependency Management</h2>\n<p>One way to add or remove dependencies is to directly edit <em>pyproject.toml</em> and then run <code>poetry install</code> to apply the changes. We will instead use the <code>add</code> and <code>remove</code> commands to avoid manual modifications.</p>\n<h3>Adding Dependencies</h3>\n<p>Let's add two packages to the project, <em>pendulum</em> and <em>coo</em>:</p>\n<pre><code>$ poetry add pendulum coo\n</code></pre>\n<p><img alt=\"poetry-add-command\" src=\"https://raw.githubusercontent.com/wilfredinni/pysheetComments/master/2019/April/poetry_vscode_p1/poetry-add.png\" /></p>\n<p>Open <em>pyproject.toml</em> and <em>poetry.lock</em> and see how they have updated.</p>\n<h3>Adding Dev Dependencies</h3>\n<p>These dependencies will be available only during development, Poetry will not include them when building and publishing the project.</p>\n<p>We already installed <em>Pytest</em>, but we will also use <a href=\"http://flake8.pycqa.org/en/latest/\">flake8</a> for linting and <a href=\"http://mypy-lang.org/\">mypy</a> for static typing:</p>\n<pre><code>$ poetry add -D flake8 mypy\n</code></pre>\n<p>Now that I think about it, I forgot to add a formatter. We'll go with <a href=\"https://black.readthedocs.io/en/stable/\">black</a>:</p>\n<pre><code>$ poetry add -D black\n[ValueError]\nCould not find a matching version of package black\n\nadd [-D|--dev] [--git GIT] [--path PATH] [-E|--extras EXTRAS] [--optional] [--python PYTHON] [--platform PLATFORM] [--allow-prereleases] [--dry-run] [--] &lt;name&gt; (&lt;name&gt;)...\n</code></pre>\n<p>This error happens because <em>black</em> is in a pre-release state, so Poetry cannot find any stable version for us. But I really want it so let's install it anyway using the <code>--allow-prereleases</code> flag:</p>\n<pre><code>$ poetry add -D black --allow-prereleases\n</code></pre>\n<p><img alt=\"poetry-add-dev-command\" src=\"https://raw.githubusercontent.com/wilfredinni/pysheetComments/master/2019/April/poetry_vscode_p1/poetry-add-dev.png\" /></p>\n<h3>Removing Dependencies</h3>\n<p>You know what, I changed my mind, this project will use nor <em>coo</em> nor <em>mypy</em>. Start by removing <em>coo</em>, a normal dependency of our project:</p>\n<pre><code>$ poetry remove coo\n</code></pre>\n<p>Now <em>mypy</em> which is a dev dependency:</p>\n<pre><code>$ poetry remove -D mypy\n</code></pre>\n<h2>Conclusion</h2>\n<p>In this first part, we have started a new project, created a Virtual Environment and added and removed dependencies by using the following commands:</p>\n<table>\n<thead><tr>\n<th>Command</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>poetry new [package-name]</code></td>\n<td>Start a new Python Project.</td>\n</tr>\n<tr>\n<td><code>poetry init</code></td>\n<td>Create a <em>pyproject.toml</em> file interactively.</td>\n</tr>\n<tr>\n<td><code>poetry install</code></td>\n<td>Install the packages inside the <em>pyproject.toml</em> file.</td>\n</tr>\n<tr>\n<td><code>poetry add [package-name]</code></td>\n<td>Add a package to a Virtual Environment.</td>\n</tr>\n<tr>\n<td><code>poetry add -D [package-name]</code></td>\n<td>Add a dev package to a Virtual Environment.</td>\n</tr>\n<tr>\n<td><code>poetry remove [package-name]</code></td>\n<td>Remove a package from a Virtual Environment.</td>\n</tr>\n<tr>\n<td><code>poetry remove -D [package-name]</code></td>\n<td>Remove a dev package from a Virtual Environment.</td>\n</tr>\n<tr>\n<td><code>poetry self:update</code></td>\n<td>Update poetry to the latest stable version.</td>\n</tr>\n</tbody>\n</table>\n<p>In the <a href=\"https://www.pythoncheatsheet.org/blog/python-projects-with-poetry-and-vscode-part-2\">Second Part</a>, we will see more <em>Poetry</em> commands, add our Virtual Environment to <em>VSCode</em> and use the dev packages we installed to lint (Flake8), format (Black) and test (Pytest) our code inside the editor. Finally, in a third one, we will write and publish a sample library to <em>PyPI</em>.</p>\n<p>Any doubt or suggestion? Please leave a comment.</p>"
            },
            "id": "http://www.pythoncheatsheet.org/blog/python-projects-with-poetry-and-vscode-part-1/",
            "guidislink": false
        },
        {
            "title": "Python Comprehensions: A step by step Introduction",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://www.pythoncheatsheet.org/latest/feed/",
                "value": "Python Comprehensions: A step by step Introduction"
            },
            "links": [
                {
                    "rel": "alternate",
                    "type": "text/html",
                    "href": "http://www.pythoncheatsheet.org/blog/python-comprehensions-step-by-step/"
                }
            ],
            "link": "http://www.pythoncheatsheet.org/blog/python-comprehensions-step-by-step/",
            "summary": "<p><em>List Comprehensions</em> are a special kind of syntax that let us create lists out of other lists (<a href=\"https://en.wikipedia.org/wiki/List_comprehension\">Wikipedia</a>, <a href=\"https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions\">The Python Tutorial</a>). They are incredible useful when dealing with numbers and with one or two level of nested <em>for loops</em>, but beyond that, they can become a little too hard to read.</p>\n<p>In this article, we are going to make some <em>For Loops</em> and rewrite them, step by step, into <em>Comprehensions</em>.</p>\n<h2>Basics</h2>\n<p>The truth is <em>List Comprehensions</em> are not too complex, but they are still a bit difficult to understand at first because they may look a little weird. Why? Well, the order in which they are written is the <strong><em>opposite</em></strong> of what we usually see in a <em>For Loop</em>.</p>\n<pre><code class=\"lang-python\">names = ['Charles', 'Susan', 'Patrick', 'George', 'Carol']\n\nfor n in names:\n    print(n)\n\n# Charles\n# Susan\n# Patrick\n# George\n# Carol\n</code></pre>\n<p>To do the same but with a <em>List Comprehension</em>, we start at the very end of the <em>loop</em>:</p>\n<pre><code class=\"lang-python\">names = ['Charles', 'Susan', 'Patrick', 'George', 'Carol']\n[print(n) for n in names]\n\n# Charles\n# Susan\n# Patrick\n# George\n# Carol\n</code></pre>\n<p>Notice how we inverted the order:</p>\n<ul>\n<li>First, we determine what the output of the loop will be <code>[print(n) ...]</code>.</li>\n<li>And then we define the variable that will represent each of the items and state the <a href=\"https://www.pythoncheatsheet.org/#Lists\">List</a> (or <a href=\"https://www.pythoncheatsheet.org/#Set-comprehension\">Set</a>/<a href=\"https://www.pythoncheatsheet.org/#Dictionaries-and-Structuring-Data\">Dictionary</a>) we will work on <code>[... for n in names]</code>.</li>\n</ul>\n<p>Not that difficult right?</p>\n<h2>Creating a new List from a Comprehension</h2>\n<blockquote><p>This is the primary use of a <em>List Comprehension</em>. Other usages may result in a hard-to-read code for you and others.</p>\n</blockquote>\n<p>This is how we create a new list from an existing collection with a <em>For Loop</em>:</p>\n<pre><code class=\"lang-python\">names = ['Charles', 'Susan', 'Patrick', 'George', 'Carol']\n\nnew_list = []\nfor n in names:\n    new_list.append(n)\n\nprint(new_list)\n# ['Charles', 'Susan', 'Patrick', 'George', 'Carol']\n</code></pre>\n<p>And this is how we do the same with a <em>List Comprehension</em>:</p>\n<pre><code class=\"lang-python\">names = ['Charles', 'Susan', 'Patrick', 'George', 'Carol']\n\nnew_list = [n for n in names]\nprint(new_list)\n# ['Charles', 'Susan', 'Patrick', 'George', 'Carol']\n</code></pre>\n<p>The reason we can do this is that a <em>List Comprehension</em> standard behavior is to return a list:</p>\n<pre><code class=\"lang-python\">&gt;&gt;&gt; names = ['Charles', 'Susan', 'Patrick', 'George', 'Carol']\n&gt;&gt;&gt; [n for n in names]\n['Charles', 'Susan', 'Patrick', 'George', 'Carol']\n</code></pre>\n<h2>Adding Conditionals</h2>\n<p>What if we want <code>new_list</code> to have only the names that start with <code>C</code>? With a <em>For Loop</em> we would do it like this:</p>\n<pre><code class=\"lang-python\">names = ['Charles', 'Susan', 'Patrick', 'George', 'Carol']\n\nnew_list = []\nfor n in names:\n    if n.startswith('C'):\n        new_list.append(n)\n\nprint(new_list)\n# ['Charles', 'Carol']\n</code></pre>\n<p>In a <em>List Comprehension</em>, we add the if statement at its end:</p>\n<pre><code class=\"lang-python\">names = ['Charles', 'Susan', 'Patrick', 'George', 'Carol']\n\nnew_list = [n for n in names if n.startswith('C')]\nprint(new_list)\n# ['Charles', 'Carol']\n</code></pre>\n<p>A lot more readable, right?</p>\n<h2>Formatting long List Comprehensions</h2>\n<p>This time, we want <code>new_list</code> to have not only the names that start with a <code>C</code> but also those that end with an <code>e</code> and contain a <code>k</code>:</p>\n<pre><code class=\"lang-python\">names = ['Charles', 'Susan', 'Patrick', 'George', 'Carol']\n\nnew_list = [n for n in names if n.startswith('C') or n.endswith('e') or 'k' in n]\nprint(new_list)\n# ['Charles', 'Patrick', 'George', 'Carol']\n</code></pre>\n<p>Well, that is messy. Fortunately, it is possible to break <em>Comprehensions</em> in different lines:</p>\n<pre><code class=\"lang-python\">new_list = [n for n in names\n            if n.startswith('C')\n            or n.endswith('e')\n            or 'k' in n]\n</code></pre>\n<h2>Set and Dict Comprehensions</h2>\n<p>If you learned the basics of <em>List Comprehensions</em>... Congratulations! You just did it with <a href=\"https://www.pythoncheatsheet.org/#Set-comprehension\">Sets</a> and <a href=\"https://www.pythoncheatsheet.org/#Dictionaries-and-Structuring-Data\">Dictionaries</a>!</p>\n<p>Set comprehension:</p>\n<pre><code class=\"lang-python\">my_set = {&quot;abc&quot;, &quot;def&quot;}\n\n# Here, we create a new set with uppercase elements with a for loop\nnew_set = set()\nfor s in my_set:\n    new_set.add(s.upper())\n\nprint(new_set)\n# {'DEF', 'ABC'}\n\n# The same, but with a set comprehension\nnew_set = {s.upper() for s in my_set}\nprint(new_set)\n# {'DEF', 'ABC'}\n</code></pre>\n<p>Dict comprehension:</p>\n<pre><code class=\"lang-python\">my_dict = {'name': 'Christine', 'age': 98}\n\n# A new dictionary out of an existing one with a for loop\nnew_dict = {}\nfor key, value in my_dict.items():\n    new_dict[key] = value\n\nprint(new_dict)\n# {'name': 'Christine', 'age': 98}\n\n# Using a dict comprehension\nnew_dict = {key: value for key, value in my_dict.items()}  # Notice the &quot;:&quot;\nprint(new_dict)\n# {'name': 'Christine', 'age': 98}\n</code></pre>\n<blockquote><p>Recommended Article: <a href=\"https://www.pythoncheatsheet.org/blog/python-sets-what-why-how\">Python Sets: What, Why and How </a>.</p>\n</blockquote>\n<h2>Conclusion</h2>\n<p>I don't know about you, but every time I learn something new there is this urge to use it right away. When that happens, I force myself to stop and think for a moment... Should I change this big, nested and already messy looking <em>For Loop</em> to a <em>List Comprehension</em>? Probably not.</p>\n<blockquote><p>Readability counts. <a href=\"https://www.python.org/dev/peps/pep-0020/\">The Zen of Python</a>.</p>\n</blockquote>\n<p>Any doubt or suggestion? Please leave a comment and have a nice day!</p>",
            "summary_detail": {
                "type": "text/html",
                "language": null,
                "base": "https://www.pythoncheatsheet.org/latest/feed/",
                "value": "<p><em>List Comprehensions</em> are a special kind of syntax that let us create lists out of other lists (<a href=\"https://en.wikipedia.org/wiki/List_comprehension\">Wikipedia</a>, <a href=\"https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions\">The Python Tutorial</a>). They are incredible useful when dealing with numbers and with one or two level of nested <em>for loops</em>, but beyond that, they can become a little too hard to read.</p>\n<p>In this article, we are going to make some <em>For Loops</em> and rewrite them, step by step, into <em>Comprehensions</em>.</p>\n<h2>Basics</h2>\n<p>The truth is <em>List Comprehensions</em> are not too complex, but they are still a bit difficult to understand at first because they may look a little weird. Why? Well, the order in which they are written is the <strong><em>opposite</em></strong> of what we usually see in a <em>For Loop</em>.</p>\n<pre><code class=\"lang-python\">names = ['Charles', 'Susan', 'Patrick', 'George', 'Carol']\n\nfor n in names:\n    print(n)\n\n# Charles\n# Susan\n# Patrick\n# George\n# Carol\n</code></pre>\n<p>To do the same but with a <em>List Comprehension</em>, we start at the very end of the <em>loop</em>:</p>\n<pre><code class=\"lang-python\">names = ['Charles', 'Susan', 'Patrick', 'George', 'Carol']\n[print(n) for n in names]\n\n# Charles\n# Susan\n# Patrick\n# George\n# Carol\n</code></pre>\n<p>Notice how we inverted the order:</p>\n<ul>\n<li>First, we determine what the output of the loop will be <code>[print(n) ...]</code>.</li>\n<li>And then we define the variable that will represent each of the items and state the <a href=\"https://www.pythoncheatsheet.org/#Lists\">List</a> (or <a href=\"https://www.pythoncheatsheet.org/#Set-comprehension\">Set</a>/<a href=\"https://www.pythoncheatsheet.org/#Dictionaries-and-Structuring-Data\">Dictionary</a>) we will work on <code>[... for n in names]</code>.</li>\n</ul>\n<p>Not that difficult right?</p>\n<h2>Creating a new List from a Comprehension</h2>\n<blockquote><p>This is the primary use of a <em>List Comprehension</em>. Other usages may result in a hard-to-read code for you and others.</p>\n</blockquote>\n<p>This is how we create a new list from an existing collection with a <em>For Loop</em>:</p>\n<pre><code class=\"lang-python\">names = ['Charles', 'Susan', 'Patrick', 'George', 'Carol']\n\nnew_list = []\nfor n in names:\n    new_list.append(n)\n\nprint(new_list)\n# ['Charles', 'Susan', 'Patrick', 'George', 'Carol']\n</code></pre>\n<p>And this is how we do the same with a <em>List Comprehension</em>:</p>\n<pre><code class=\"lang-python\">names = ['Charles', 'Susan', 'Patrick', 'George', 'Carol']\n\nnew_list = [n for n in names]\nprint(new_list)\n# ['Charles', 'Susan', 'Patrick', 'George', 'Carol']\n</code></pre>\n<p>The reason we can do this is that a <em>List Comprehension</em> standard behavior is to return a list:</p>\n<pre><code class=\"lang-python\">&gt;&gt;&gt; names = ['Charles', 'Susan', 'Patrick', 'George', 'Carol']\n&gt;&gt;&gt; [n for n in names]\n['Charles', 'Susan', 'Patrick', 'George', 'Carol']\n</code></pre>\n<h2>Adding Conditionals</h2>\n<p>What if we want <code>new_list</code> to have only the names that start with <code>C</code>? With a <em>For Loop</em> we would do it like this:</p>\n<pre><code class=\"lang-python\">names = ['Charles', 'Susan', 'Patrick', 'George', 'Carol']\n\nnew_list = []\nfor n in names:\n    if n.startswith('C'):\n        new_list.append(n)\n\nprint(new_list)\n# ['Charles', 'Carol']\n</code></pre>\n<p>In a <em>List Comprehension</em>, we add the if statement at its end:</p>\n<pre><code class=\"lang-python\">names = ['Charles', 'Susan', 'Patrick', 'George', 'Carol']\n\nnew_list = [n for n in names if n.startswith('C')]\nprint(new_list)\n# ['Charles', 'Carol']\n</code></pre>\n<p>A lot more readable, right?</p>\n<h2>Formatting long List Comprehensions</h2>\n<p>This time, we want <code>new_list</code> to have not only the names that start with a <code>C</code> but also those that end with an <code>e</code> and contain a <code>k</code>:</p>\n<pre><code class=\"lang-python\">names = ['Charles', 'Susan', 'Patrick', 'George', 'Carol']\n\nnew_list = [n for n in names if n.startswith('C') or n.endswith('e') or 'k' in n]\nprint(new_list)\n# ['Charles', 'Patrick', 'George', 'Carol']\n</code></pre>\n<p>Well, that is messy. Fortunately, it is possible to break <em>Comprehensions</em> in different lines:</p>\n<pre><code class=\"lang-python\">new_list = [n for n in names\n            if n.startswith('C')\n            or n.endswith('e')\n            or 'k' in n]\n</code></pre>\n<h2>Set and Dict Comprehensions</h2>\n<p>If you learned the basics of <em>List Comprehensions</em>... Congratulations! You just did it with <a href=\"https://www.pythoncheatsheet.org/#Set-comprehension\">Sets</a> and <a href=\"https://www.pythoncheatsheet.org/#Dictionaries-and-Structuring-Data\">Dictionaries</a>!</p>\n<p>Set comprehension:</p>\n<pre><code class=\"lang-python\">my_set = {&quot;abc&quot;, &quot;def&quot;}\n\n# Here, we create a new set with uppercase elements with a for loop\nnew_set = set()\nfor s in my_set:\n    new_set.add(s.upper())\n\nprint(new_set)\n# {'DEF', 'ABC'}\n\n# The same, but with a set comprehension\nnew_set = {s.upper() for s in my_set}\nprint(new_set)\n# {'DEF', 'ABC'}\n</code></pre>\n<p>Dict comprehension:</p>\n<pre><code class=\"lang-python\">my_dict = {'name': 'Christine', 'age': 98}\n\n# A new dictionary out of an existing one with a for loop\nnew_dict = {}\nfor key, value in my_dict.items():\n    new_dict[key] = value\n\nprint(new_dict)\n# {'name': 'Christine', 'age': 98}\n\n# Using a dict comprehension\nnew_dict = {key: value for key, value in my_dict.items()}  # Notice the &quot;:&quot;\nprint(new_dict)\n# {'name': 'Christine', 'age': 98}\n</code></pre>\n<blockquote><p>Recommended Article: <a href=\"https://www.pythoncheatsheet.org/blog/python-sets-what-why-how\">Python Sets: What, Why and How </a>.</p>\n</blockquote>\n<h2>Conclusion</h2>\n<p>I don't know about you, but every time I learn something new there is this urge to use it right away. When that happens, I force myself to stop and think for a moment... Should I change this big, nested and already messy looking <em>For Loop</em> to a <em>List Comprehension</em>? Probably not.</p>\n<blockquote><p>Readability counts. <a href=\"https://www.python.org/dev/peps/pep-0020/\">The Zen of Python</a>.</p>\n</blockquote>\n<p>Any doubt or suggestion? Please leave a comment and have a nice day!</p>"
            },
            "id": "http://www.pythoncheatsheet.org/blog/python-comprehensions-step-by-step/",
            "guidislink": false
        },
        {
            "title": "Python *args and **kwargs Made Easy",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://www.pythoncheatsheet.org/latest/feed/",
                "value": "Python *args and **kwargs Made Easy"
            },
            "links": [
                {
                    "rel": "alternate",
                    "type": "text/html",
                    "href": "http://www.pythoncheatsheet.org/blog/python-easy-args-kwargs/"
                }
            ],
            "link": "http://www.pythoncheatsheet.org/blog/python-easy-args-kwargs/",
            "summary": "<p>I do not know about you, but every time I saw some function with <code>*args</code> and <code>**kwargs</code> as parameters, I'd get a little scared. I've even \"used\" them while doing some backend work with Django without understanding a thing. If you're a self-taught developer like me, I know you've been there too.</p>\n<p>A few months ago I decided to stop being lazy and started to research it. To my surprise, they were very easy to grasp when playing with the interpreter but not so much when reading about them. I wrote this post trying to explain <a href=\"https://www.pythoncheatsheet.org/#args-and-kwargs\">args and kwargs</a> the way I would have liked someone explained them to me.</p>\n<h2>Basics</h2>\n<p>The first thing you need to know is that <code>*args</code> and <code>**kwargs</code> lets you pass an undefined number of <code>arguments</code> and <code>keywords</code> when calling a <a href=\"https://www.pythoncheatsheet.org/#Functions\">function</a>:</p>\n<pre><code class=\"lang-python\">def some_function(*args, **kwargs):\n    pass\n\n# call some_function with any number of arguments\nsome_function(arg1, arg2, arg3)\n\n# call some_function with any number of keywords\nsome_function(key1=arg1, key2=arg2, key3=arg3)\n\n# call both, arguments and keywords\nsome_function(arg, key1=arg1)\n\n# or none\nsome_function()\n</code></pre>\n<p>Second, the words <code>args</code> and <code>kwargs</code> are conventions. This means they are not imposed by the interpreter, but considered good practice among the Python community:</p>\n<pre><code class=\"lang-python\"># This function would work just fine\ndef some_function(*arguments, **keywords):\n    pass\n</code></pre>\n<blockquote><p>A note about conventions:</p>\n<p>Even if the above function works, don't do it. Conventions are there to help you write readable code for you and anyone that might be interested in your project.</p>\n<p>Other conventions include the 4 space indentation, comments, and imports. Reading the <a href=\"https://www.python.org/dev/peps/pep-0008/\">PEP 8 -- Style Guide for Python Code</a> is highly recommended.</p>\n</blockquote>\n<p>So, how does Python know that we want our function to accept multiple arguments and/or keywords? Yes, the answers are the <code>*</code> and <code>**</code> operators.</p>\n<p>Now that we have covered the basics, let's work with them \ud83d\udc4a.</p>\n<h2>args</h2>\n<p>We now know how to pass multiple arguments using <code>*args</code> as a parameter to our functions, but how do we work with them? It's easy: all the arguments are contained within the <code>args</code> variable as a <a href=\"https://www.pythoncheatsheet.org/#Tuple-Data-Type\">tuple</a>:</p>\n<pre><code class=\"lang-python\">def some_function(*args):\n    print(f'Arguments passed: {args} as {type(args)}')\n\n\nsome_function('arg1', 'arg2', 'arg3')\n# Arguments passed: ('arg1', 'arg2', 'arg3') as &lt;class 'tuple'&gt;\n</code></pre>\n<p>We can iterate over them:</p>\n<pre><code class=\"lang-python\">def some_function(*args):\n    for a in args:\n        print(a)\n\n\nsome_function('arg1', 'arg2', 'arg3')\n# arg1\n# arg2\n# arg3\n</code></pre>\n<p>Access the elements with an index:</p>\n<pre><code class=\"lang-python\">def some_function(*args):\n    print(args[1])\n\n\nsome_function('arg1', 'arg2', 'arg3')  # arg2\n</code></pre>\n<p>Slice:</p>\n<pre><code class=\"lang-python\">def some_function(*args):\n    print(args[0:2])\n\n\nsome_function('arg1', 'arg2', 'arg3')\n# ('arg1', 'arg2')\n</code></pre>\n<p>Whatever you do with a <a href=\"https://www.pythoncheatsheet.org/#Tuple-Data-Type\">tuple</a>, you can do it with <code>args</code>.</p>\n<h2>kwargs</h2>\n<p>While arguments are stored in the args variable, keywords are within <code>kwargs</code>, but this time as a <a href=\"https://www.pythoncheatsheet.org/#Dictionaries-and-Structuring-Data\">dictionary</a> where the key is the keyword:</p>\n<pre><code class=\"lang-python\">def some_function(**kwargs):\n    print(f'keywords: {kwargs} as {type(kwargs)}')\n\n\nsome_function(key1='arg1', key2='arg2', key3='arg3')\n# keywords: {'key1': 'arg1', 'key2': 'arg2', 'key3': 'arg3'} as &lt;class 'dict'&gt;\n</code></pre>\n<p>Again, we can do with <code>kwargs</code> the same we would do with any <a href=\"https://www.pythoncheatsheet.org/#Dictionaries-and-Structuring-Data\">dictionary</a>.</p>\n<p>Iterate over:</p>\n<pre><code class=\"lang-python\">def some_function(**kwargs):\n    for key, value in kwargs.items():\n        print(f'{key}: {value}')\n\n\nsome_function(key1='arg1', key2='arg2', key3='arg3')\n# key1: arg1\n# key2: arg2\n# key3: arg3\n</code></pre>\n<p>Use the <code>get()</code> method:</p>\n<pre><code class=\"lang-python\">def some_function(key, **kwargs):\n    print(kwargs.get(key))\n\n\nsome_function('key3', key1='arg1', key2='arg2', key3='arg3')\n# arg3\n</code></pre>\n<p>And a lot <a href=\"https://www.pythoncheatsheet.org/#Dictionaries-and-Structuring-Data\">more</a> =).</p>\n<h2>Conclusion</h2>\n<p><code>*args</code> and <code>**kwargs</code> may seem scary, but the truth is that they are not that difficult to grasp and have the power to grant your functions with flexibility and readability. If you know about <a href=\"https://www.pythoncheatsheet.org/#Tuple-Data-Type\">tuples</a> and <a href=\"https://www.pythoncheatsheet.org/#Dictionaries-and-Structuring-Data\">dictionaries</a>, you are ready to go.</p>\n<p>Want to play with args and kwargs? <a href=\"https://mybinder.org/v2/gh/wilfredinni/python-cheatsheet/master?filepath=jupyter_notebooks\">This</a> is an online Jupyter Notebook for you to try.</p>\n<p>Also, some examples make use of <code>f-strings</code>, a relatively new way to format strings in Python 3.6+. <a href=\"https://www.pythoncheatsheet.org/#Formatted-String-Literals-or-f-strings\">Here</a> you can read more about it.</p>\n<p>Any doubt or suggestion? Please leave a comment and have a nice day!</p>",
            "summary_detail": {
                "type": "text/html",
                "language": null,
                "base": "https://www.pythoncheatsheet.org/latest/feed/",
                "value": "<p>I do not know about you, but every time I saw some function with <code>*args</code> and <code>**kwargs</code> as parameters, I'd get a little scared. I've even \"used\" them while doing some backend work with Django without understanding a thing. If you're a self-taught developer like me, I know you've been there too.</p>\n<p>A few months ago I decided to stop being lazy and started to research it. To my surprise, they were very easy to grasp when playing with the interpreter but not so much when reading about them. I wrote this post trying to explain <a href=\"https://www.pythoncheatsheet.org/#args-and-kwargs\">args and kwargs</a> the way I would have liked someone explained them to me.</p>\n<h2>Basics</h2>\n<p>The first thing you need to know is that <code>*args</code> and <code>**kwargs</code> lets you pass an undefined number of <code>arguments</code> and <code>keywords</code> when calling a <a href=\"https://www.pythoncheatsheet.org/#Functions\">function</a>:</p>\n<pre><code class=\"lang-python\">def some_function(*args, **kwargs):\n    pass\n\n# call some_function with any number of arguments\nsome_function(arg1, arg2, arg3)\n\n# call some_function with any number of keywords\nsome_function(key1=arg1, key2=arg2, key3=arg3)\n\n# call both, arguments and keywords\nsome_function(arg, key1=arg1)\n\n# or none\nsome_function()\n</code></pre>\n<p>Second, the words <code>args</code> and <code>kwargs</code> are conventions. This means they are not imposed by the interpreter, but considered good practice among the Python community:</p>\n<pre><code class=\"lang-python\"># This function would work just fine\ndef some_function(*arguments, **keywords):\n    pass\n</code></pre>\n<blockquote><p>A note about conventions:</p>\n<p>Even if the above function works, don't do it. Conventions are there to help you write readable code for you and anyone that might be interested in your project.</p>\n<p>Other conventions include the 4 space indentation, comments, and imports. Reading the <a href=\"https://www.python.org/dev/peps/pep-0008/\">PEP 8 -- Style Guide for Python Code</a> is highly recommended.</p>\n</blockquote>\n<p>So, how does Python know that we want our function to accept multiple arguments and/or keywords? Yes, the answers are the <code>*</code> and <code>**</code> operators.</p>\n<p>Now that we have covered the basics, let's work with them \ud83d\udc4a.</p>\n<h2>args</h2>\n<p>We now know how to pass multiple arguments using <code>*args</code> as a parameter to our functions, but how do we work with them? It's easy: all the arguments are contained within the <code>args</code> variable as a <a href=\"https://www.pythoncheatsheet.org/#Tuple-Data-Type\">tuple</a>:</p>\n<pre><code class=\"lang-python\">def some_function(*args):\n    print(f'Arguments passed: {args} as {type(args)}')\n\n\nsome_function('arg1', 'arg2', 'arg3')\n# Arguments passed: ('arg1', 'arg2', 'arg3') as &lt;class 'tuple'&gt;\n</code></pre>\n<p>We can iterate over them:</p>\n<pre><code class=\"lang-python\">def some_function(*args):\n    for a in args:\n        print(a)\n\n\nsome_function('arg1', 'arg2', 'arg3')\n# arg1\n# arg2\n# arg3\n</code></pre>\n<p>Access the elements with an index:</p>\n<pre><code class=\"lang-python\">def some_function(*args):\n    print(args[1])\n\n\nsome_function('arg1', 'arg2', 'arg3')  # arg2\n</code></pre>\n<p>Slice:</p>\n<pre><code class=\"lang-python\">def some_function(*args):\n    print(args[0:2])\n\n\nsome_function('arg1', 'arg2', 'arg3')\n# ('arg1', 'arg2')\n</code></pre>\n<p>Whatever you do with a <a href=\"https://www.pythoncheatsheet.org/#Tuple-Data-Type\">tuple</a>, you can do it with <code>args</code>.</p>\n<h2>kwargs</h2>\n<p>While arguments are stored in the args variable, keywords are within <code>kwargs</code>, but this time as a <a href=\"https://www.pythoncheatsheet.org/#Dictionaries-and-Structuring-Data\">dictionary</a> where the key is the keyword:</p>\n<pre><code class=\"lang-python\">def some_function(**kwargs):\n    print(f'keywords: {kwargs} as {type(kwargs)}')\n\n\nsome_function(key1='arg1', key2='arg2', key3='arg3')\n# keywords: {'key1': 'arg1', 'key2': 'arg2', 'key3': 'arg3'} as &lt;class 'dict'&gt;\n</code></pre>\n<p>Again, we can do with <code>kwargs</code> the same we would do with any <a href=\"https://www.pythoncheatsheet.org/#Dictionaries-and-Structuring-Data\">dictionary</a>.</p>\n<p>Iterate over:</p>\n<pre><code class=\"lang-python\">def some_function(**kwargs):\n    for key, value in kwargs.items():\n        print(f'{key}: {value}')\n\n\nsome_function(key1='arg1', key2='arg2', key3='arg3')\n# key1: arg1\n# key2: arg2\n# key3: arg3\n</code></pre>\n<p>Use the <code>get()</code> method:</p>\n<pre><code class=\"lang-python\">def some_function(key, **kwargs):\n    print(kwargs.get(key))\n\n\nsome_function('key3', key1='arg1', key2='arg2', key3='arg3')\n# arg3\n</code></pre>\n<p>And a lot <a href=\"https://www.pythoncheatsheet.org/#Dictionaries-and-Structuring-Data\">more</a> =).</p>\n<h2>Conclusion</h2>\n<p><code>*args</code> and <code>**kwargs</code> may seem scary, but the truth is that they are not that difficult to grasp and have the power to grant your functions with flexibility and readability. If you know about <a href=\"https://www.pythoncheatsheet.org/#Tuple-Data-Type\">tuples</a> and <a href=\"https://www.pythoncheatsheet.org/#Dictionaries-and-Structuring-Data\">dictionaries</a>, you are ready to go.</p>\n<p>Want to play with args and kwargs? <a href=\"https://mybinder.org/v2/gh/wilfredinni/python-cheatsheet/master?filepath=jupyter_notebooks\">This</a> is an online Jupyter Notebook for you to try.</p>\n<p>Also, some examples make use of <code>f-strings</code>, a relatively new way to format strings in Python 3.6+. <a href=\"https://www.pythoncheatsheet.org/#Formatted-String-Literals-or-f-strings\">Here</a> you can read more about it.</p>\n<p>Any doubt or suggestion? Please leave a comment and have a nice day!</p>"
            },
            "id": "http://www.pythoncheatsheet.org/blog/python-easy-args-kwargs/",
            "guidislink": false
        },
        {
            "title": "Python Newbies: Who to Follow, What to Read and Where to Ask",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://www.pythoncheatsheet.org/latest/feed/",
                "value": "Python Newbies: Who to Follow, What to Read and Where to Ask"
            },
            "links": [
                {
                    "rel": "alternate",
                    "type": "text/html",
                    "href": "http://www.pythoncheatsheet.org/blog/python-follow-read-and-ask/"
                }
            ],
            "link": "http://www.pythoncheatsheet.org/blog/python-follow-read-and-ask/",
            "summary": "<blockquote><p>Updates:</p>\n<ul>\n<li>05-21-2019: <a href=\"https://www.pythoncheatsheet.org/latest/feed/#Blogs\">Blogs</a>, <a href=\"https://www.pythoncheatsheet.org/latest/feed/#Podcasts\">Podcasts</a>.</li>\n</ul>\n</blockquote>\n<p>As a self-taught Python Developer and a newbie myself, I think that one of the most important things when starting is to surround ourselves with all things Python related. We can <a href=\"https://www.pythoncheatsheet.org/latest/feed/#Blogs\">read blogs</a>, follow <a href=\"https://www.pythoncheatsheet.org/latest/feed/#Twitter\">developers on Twitter</a> and try to contribute to their projects on GitHub. We can also subscribe to the different <a href=\"https://www.pythoncheatsheet.org/latest/feed/#Weekly-Mailing-Lists\">mailing lists</a> that exist, and of course, to the many <a href=\"https://www.pythoncheatsheet.org/latest/feed/#YouTube\">YouTube channels</a> that put online and free of charge millions of hours of content, so we can just keep getting better and better at Python.</p>\n<p>In this post, I want to share some \"assets\" that I have collected to this point.</p>\n<h2>Awesome Python</h2>\n<ul>\n<li><p><a href=\"https://awesome-python.com/\">Awesome Python</a></p>\n<blockquote><p>A curated list of awesome Python frameworks, libraries, software and resources.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://python.libhunt.com/\">Python LibHunt</a></p>\n<blockquote><p>Your go-to Python Toolbox.</p>\n</blockquote>\n</li>\n</ul>\n<h2>Blogs</h2>\n<ul>\n<li><p><a href=\"https://realpython.com/\">Real Python</a></p>\n<blockquote><p>The realpython.com tutorial team is known for making the highest-quality Python tutorials available online.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://blog.miguelgrinberg.com/index\">Miguel Grinberg</a> (Here you can find the <a href=\"https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world\">Flask Mega Tutorial</a>. I used it myself as a starting point to build this site.)</p>\n<blockquote><p>I spent some of my spare time in the last month or so writing a tiny blog engine, and I really like how it came out.</p>\n</blockquote>\n</li>\n<li><p><a href=\"http://rahmonov.me/\"> Jahongir Rahmonov</a></p>\n<blockquote><p>I write about Python, Django, AngularJS and sometimes something non-technical.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://simpleisbetterthancomplex.com/\">simple is better than complex </a></p>\n<blockquote><p>Stories about Python, Django and Web Development.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://www.fullstackpython.com/blog.html\">Full Stack Python</a></p>\n<blockquote><p>Now you want to take your initial Python knowledge and make something real, like a web application to show off to friends or sell as a service to customers. That's where Full Stack Python comes in. You have come to the right place to learn everything you need to create, deploy and operate Python-powered applications.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://djangostars.com/blog/\">Diajngo Stars</a></p>\n<blockquote><p>In a blog we tell how to develop and grow sustainable and scalable Fintech, Taxi&amp;Transportation and Booking products. We also answer customers' most common questions and cover useful topics.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://inventwithpython.com/blog/\">The Invent with Python Blog</a></p>\n<blockquote><p>Learning to program makes you a smarter and more capable human being. Computers are not only the most common tool we encounter in our day-to-day lives, but also the most powerful. Even if your plans don't include becoming a software engineer writing code for the next Mars mission, you can find value in learning to code.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://overiq.com/blog/\">OVERIQ</a> (<a href=\"https://overiq.com/\">Here</a>, you can also find coruses on Python, Django, Flask, SQLAlchemy and C)</p>\n<blockquote><p>I'm a simple coder who have a knack with computer languages. My aim is to educate every one with the best of the language knowledge which is not easily available anywhere else in the Internet world.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://www.blog.pythonlibrary.org/\">The Mouse vs the Python</a></p>\n<blockquote><p>My name is Mike Driscoll. I am a computer programmer by trade and use Python almost exclusively to make my living.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://snarky.ca/\">Snarky</a></p>\n<blockquote><p>Python core developer. Dev lead for the Python extension for VS Code. Tall, snarky Canadian.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://www.pythonforthelab.com/blog/\">Python for the Lab</a></p>\n<blockquote><p>Python For The Lab is a collection of resources to help you start using Python for developing solutions in your lab.</p>\n</blockquote>\n</li>\n<li><p><a href=\"http://lucumr.pocoo.org/\">Armin Ronacher's Thoughts and Writings</a></p>\n<blockquote><p>My name is Armin Ronacher and I'm a passionate developer interested in web development, graphics, realtime rendering and tons of other stuff. I am one of the founding members of the Pocoo Team and lead developer on a couple of popular Python projects.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://thepythonguru.com/blog/\">The Python Guru</a></p>\n<blockquote><p>Become a better python developer</p>\n</blockquote>\n</li>\n<li><p><a href=\"http://pbpython.com/\">Practical Business Python</a></p>\n<blockquote><p>Taking care of business, one python script at a time.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://coolpythoncodes.com/\">Cool Python Codes</a></p>\n<blockquote><p>Code, The Revolution.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://allofyourbases.com/\">All your Base are Belong to Us</a></p>\n<blockquote><p>Physics. Data Science. General Geekery.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://www.pydanny.com/\">PyDanny</a></p>\n<blockquote><p>Hi, I'm Daniel Roy Greenfeld, and welcome to my blog. I write about Python, Django, and much more.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://pythontips.com/\">Python Tips</a></p>\n<blockquote><p>Your daily dose of bite sized python tips</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://pybit.es/pages/articles.html\">PyBites</a></p>\n<blockquote><p>A Community that Masters Python through Code Challenges</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://stackabuse.com/tag/python/\">Stack Abuse</a></p>\n</li>\n<li><p><a href=\"https://girisagar46.github.io/\">Sagar Giri</a></p>\n</li>\n<li><p><a href=\"https://pransukh.blogspot.com/\">Pran Sukh</a></p>\n</li>\n</ul>\n<h2>Weekly Mailing Lists</h2>\n<ul>\n<li><p><a href=\"https://www.python.org/community/lists/\">Python Mailing Lists and Newsgroups</a></p>\n<blockquote><p>Here's an overview of the mail and news resources for python.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://importpython.com/newsletter/\">Import Python</a></p>\n<blockquote><p>Insightful Articles, Tutorials, Projects, Videos, Tweets delivered in your inbox.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://pycoders.com/\">PyCoders Weekly</a></p>\n<blockquote><p>A free weekly e-mail newsletter, on Fridays, for those interested in python development and various topics around python.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://www.pythonweekly.com/\">Python Weekly</a></p>\n<blockquote><p>A free weekly newsletter featuring curated news, articles, new releases, jobs etc related to Python.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://www.djangoproject.com/\">Django Mailing Lists</a></p>\n<blockquote><p>Subscribe to one of our mailing lists to stay up to date with everything in the Django community</p>\n</blockquote>\n</li>\n</ul>\n<h2>Twitter</h2>\n<ul>\n<li><p><a href=\"https://twitter.com/gvanrossum\">Guido van Rossum</a></p>\n<blockquote><p>Python's creator and emeritus BDFL. Working at Dropbox. Computer History Museum Fellow.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://twitter.com/dbader_org\">Dan Bader</a></p>\n<blockquote><p>Full-stack Pythonista &amp; Python Coach. Write Clean + Pythonic code with my free tutorials: <a href=\"https://dbader.org/get-pythonic\">https://dbader.org/get-pythonic</a>  \ud83d\udc0dPreviously: Lead Dev at Mobify.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://twitter.com/dabeaz\">David Beazley</a></p>\n<blockquote><p>Author of the Python Essential Reference and Python Cookbook. I tweet deep thoughts about code, bikes, kids, and stuff.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://twitter.com/CoreyMSchafer\">Corey Schafer</a></p>\n<blockquote><p>Developer and Designer who enjoys woodworking, kayaking, astronomy, and building stuff.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://twitter.com/adrianholovaty\">Adrian Holovaty</a></p>\n<blockquote><p>Web developer, cocreator of @djangoproject, poster of YouTube guitar videos. Currently building @soundslice.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://twitter.com/miguelgrinberg\">Miguel Grinberg</a></p>\n<blockquote><p>I write software. And from time to time, I write or speak about writing software.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://twitter.com/Sentdex\">Harrison Kinsley</a></p>\n<blockquote><p>I like to build things. Programming is neat. INTJ <a href=\"https://hkinsley.com\">https://hkinsley.com</a> , <a href=\"https://pythonprogramming.net\">https://pythonprogramming.net</a> , <a href=\"http://sentdex.com\">http://sentdex.com</a>.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://twitter.com/AlSweigart\">Al Sweigart</a></p>\n<blockquote><p>Author of programming books. I use Python 4.2.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://twitter.com/mkennedy\">Michael Kennedy</a></p>\n<blockquote><p>A Python and MongoDB enthusiast, and an entrepreneur. Host of @TalkPython and @PythonBytes, founder of Talk Python Training. Python Software Foundation Fellow.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://twitter.com/ThePSF\">Python Software</a></p>\n<blockquote><p>The Python Software Foundation. For help with Python code, see comp.lang.python.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://twitter.com/PythonInsider\">Python Insider</a></p>\n<blockquote><p>The Python core development team.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://twitter.com/anacondainc\">Anaconda</a></p>\n<blockquote><p>Anaconda is the world\u2019s most popular and trusted #Python #DataScience platform, with over 6M users. We help people change the world.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://twitter.com/ProjectJupyter\">Project Jupyter</a></p>\n<blockquote><p>Multi-language interactive computing environments. The future home of the IPython notebook and related projects (same folks, same code, new name, new repos).</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://twitter.com/IPythonDev\">IPython Developers</a></p>\n<blockquote><p>Interactive Python tools. Please, Internet, it is IPython (or ipython), not iPython. Notebook and other language-agnostic parts are moving to @ProjectJupyter.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://twitter.com/djangoproject\">Django</a></p>\n<blockquote><p>A high-level Python Web framework that encourages rapid development and clean, pragmatic design. Tweets by Django Software Foundation and @jezdez.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://twitter.com/realpython\">Real Python</a></p>\n<blockquote><p>Python developer resources: #Python news, tutorials, code examples, snippets, articles, and more!</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://twitter.com/python_tip\">Daily Python Tip</a></p>\n<blockquote><p>One #python tip per day. Do you have any? Send it to <a href=\"http://bit.ly/pythontip\">http://bit.ly/pythontip</a> . Edited by @karlafej, @simecek, @pybites and... you?</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://twitter.com/pybites\">Pybites</a></p>\n<blockquote><p>Python code Challenges, Articles and News.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://twitter.com/pythontrending\">Python Trending</a></p>\n<blockquote><p>trending Python repositories on GitHub.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://twitter.com/importpython\">Import Python</a></p>\n<blockquote><p>Python Newsletter <a href=\"https://clicktracker.in/VkXRR7Po\">https://clicktracker.in/VkXRR7Po</a>  keeps you updated on what's happening in the world of Python.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://twitter.com/fullstackpython\">Full Stack Python</a></p>\n<blockquote><p>Tweets links to great #Python tutorials. Creating <a href=\"http://fullstackpython.com\">http://fullstackpython.com</a> , <a href=\"http://bit.ly/deploy-python\">http://bit.ly/deploy-python</a>  &amp; <a href=\"http://bit.ly/python-entrepreneurs\">http://bit.ly/python-entrepreneurs</a> \u2026. Run by @mattmakai \ud83d\ude0e</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://twitter.com/PythonHub\">Python Hub</a></p>\n<blockquote><p>News &amp; links about Python programming.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://twitter.com/getpy\">Get Python</a></p>\n<blockquote><p>Tweets for Python enthusiasts - by @originalankur.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://twitter.com/PythonWeekly\">Python Weekly</a></p>\n<blockquote><p>Python Weekly is a free weekly newsletter, which features curated news, articles, new releases, tools and libraries, events, jobs etc related to Python.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://twitter.com/PythonStack\">Python StackOverflow</a></p>\n<blockquote><p>StackOverflow feed of Python questions matching certain criteria.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://twitter.com/SciPyTip\">Scientific Python</a></p>\n<blockquote><p>Tweets about SciPy (Scientific Python) and related topics from @JohnDCook.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://twitter.com/pycoders\">Pycoders Weekly</a></p>\n<blockquote><p>Your weekly dose of all things Python! Python tweets by @mgrouchy and @myusuf3.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://twitter.com/BoostLog_Python\">Boostlog - Python</a></p>\n<blockquote><p>A blogging platform developers. Here will introduce the Python article posted on #Boostlog.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://twitter.com/pyCheatsheet\">Python Cheatsheet</a> \ud83e\udd2d</p>\n<blockquote><p>Python cheat sheet and Articles for Beginner and Advanced Developers.</p>\n</blockquote>\n</li>\n</ul>\n<h2>Podcasts</h2>\n<ul>\n<li><p><a href=\"https://twitter.com/pythonbytes\">Python Bytes</a></p>\n<blockquote><p>Python Headlines delivered directly to your earbuds.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://talkpython.fm/\">Talk Python To Me</a></p>\n<blockquote><p>A podcast on Python and related technologies.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://www.pythonpodcast.com/\">The Python Podcast.<em> init </em></a></p>\n<blockquote><p>Each interview explores the motivations, challenges, and experiences behind the software that you use every day.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://testandcode.com/\">Test &amp; Code - Software Testing, Developtment, Python</a></p>\n<blockquote><p>A Podcast about Software Testing, Software Development, and Python</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://djangochat.com/\">Django Chat</a></p>\n<blockquote><p>A weekly <em>podcast</em> on the <em>Django</em> Web Framework. Build websites with <em>Python</em>!</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://friday.hirelofty.com/\">Friday Afternoon Deploy: A Developer Podcast</a></p>\n<blockquote><p>Python and Django, Ruby on Rails, Golang.</p>\n</blockquote>\n</li>\n</ul>\n<h2>YouTube</h2>\n<p>This list is going to be short, just my favorites. If you want a realy complete one, check <a href=\"https://realpython.com/python-youtube-channels/\">The Ultimate List of Python YouTube Channels</a> from <a href=\"https://realpython.com/\">Real Python</a>.</p>\n<ul>\n<li><p><a href=\"https://www.youtube.com/channel/UCtxCXg-UvSnTKPOzLH4wJaQ\">Coding Tech</a></p>\n<blockquote><p>Coding Tech partners with the tech conferences around the world that provided Coding Tech with their EXPLICIT permissions to republish videos on this channel.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://www.youtube.com/channel/UCCezIgC97PvUuR4_gbFUs5g\">Corey Schafer</a></p>\n<blockquote><p>This channel is focused on creating tutorials and walkthroughs for software developers, programmers, and engineers.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://www.youtube.com/channel/UC-QDfvrRIDB6F0bIO4I4HkQ\">Pretty Printed</a></p>\n<blockquote><p>I'm Anthony. I make programming videos.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://www.youtube.com/channel/UCW6TXMZ5Pq6yL6_k5NZ2e0Q\">Socratica</a></p>\n<blockquote><p>Socratica makes high-quality educational videos on math and science. New videos every week!</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://www.youtube.com/channel/UC6HfeAa0vWeSWS6IcNAjZ2A\">Sebastiaan Math\u00f4t</a></p>\n<blockquote><p>A mix of videos about programming in Python and OpenSesame, and psychology-related topics.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://www.youtube.com/channel/UCfzlCWGWYyIQ0aLC5w48gBQ\">sentdex</a></p>\n<blockquote><p>Python Programming tutorials, going further than just the basics. Learn about machine learning, finance, data analysis, robotics, web development, game development and more.</p>\n</blockquote>\n</li>\n</ul>\n<h2>Questions</h2>\n<ul>\n<li><p><a href=\"https://stackoverflow.com/\">Stack Overflow</a></p>\n<blockquote><p>Each month, over 50 million developers come to Stack Overflow to learn, share their knowledge, and build their careers.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://www.quora.com/\">Quora</a></p>\n<blockquote><p>A place to share knowledge and better understand the world.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://www.python.org/community/forums/\">Python Community Forums</a></p>\n<blockquote><p>If you're looking for a forum in your native language, please check out the local user groups page at the Python Wiki.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://www.reddit.com/r/Python/\">r/python</a></p>\n<blockquote><p>News about the dynamic, interpreted, interactive, object-oriented, extensible programming language Python.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://www.reddit.com/r/pythontips/\">r/pythontips</a></p>\n<blockquote><p>A place to get a quick fix of python tips and tricks to make you a better Pythonista.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://www.reddit.com/r/learnpython/\">r/learnpython</a></p>\n<blockquote><p>Subreddit for posting content, questions, and asking for general advice about learning the Python programming language.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://www.reddit.com/r/django/\">r/django</a></p>\n<blockquote><p>Django subreddit</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://www.reddit.com/r/djangolearning/\">r/djangolearning</a></p>\n<blockquote><p>A group dedicated to learning Django, a Python web framework.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://www.reddit.com/r/flask/\">r/flask</a></p>\n<blockquote><p>Flask is a Python micro-framework for web development. Flask is easy to get started and a great way to build web sites and web applications.</p>\n</blockquote>\n</li>\n</ul>\n<h2>Conclusion</h2>\n<p>Just two things: First, <em>we have no excuse</em>. And second, for all the people who try to put quality content online, for the ones that do it in their spare time and for free: subscribe to their channels, give them thumbs up even before you finish watching their videos (so you don't forget later). If you read an article you liked, share it and disable your ad-blocker for their site. Support Them.</p>\n<p>As always, if you think something is missing, leave a comment and I will update the post later.</p>\n<p>Have a nice day, and eat what makes you happy!</p>",
            "summary_detail": {
                "type": "text/html",
                "language": null,
                "base": "https://www.pythoncheatsheet.org/latest/feed/",
                "value": "<blockquote><p>Updates:</p>\n<ul>\n<li>05-21-2019: <a href=\"https://www.pythoncheatsheet.org/latest/feed/#Blogs\">Blogs</a>, <a href=\"https://www.pythoncheatsheet.org/latest/feed/#Podcasts\">Podcasts</a>.</li>\n</ul>\n</blockquote>\n<p>As a self-taught Python Developer and a newbie myself, I think that one of the most important things when starting is to surround ourselves with all things Python related. We can <a href=\"https://www.pythoncheatsheet.org/latest/feed/#Blogs\">read blogs</a>, follow <a href=\"https://www.pythoncheatsheet.org/latest/feed/#Twitter\">developers on Twitter</a> and try to contribute to their projects on GitHub. We can also subscribe to the different <a href=\"https://www.pythoncheatsheet.org/latest/feed/#Weekly-Mailing-Lists\">mailing lists</a> that exist, and of course, to the many <a href=\"https://www.pythoncheatsheet.org/latest/feed/#YouTube\">YouTube channels</a> that put online and free of charge millions of hours of content, so we can just keep getting better and better at Python.</p>\n<p>In this post, I want to share some \"assets\" that I have collected to this point.</p>\n<h2>Awesome Python</h2>\n<ul>\n<li><p><a href=\"https://awesome-python.com/\">Awesome Python</a></p>\n<blockquote><p>A curated list of awesome Python frameworks, libraries, software and resources.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://python.libhunt.com/\">Python LibHunt</a></p>\n<blockquote><p>Your go-to Python Toolbox.</p>\n</blockquote>\n</li>\n</ul>\n<h2>Blogs</h2>\n<ul>\n<li><p><a href=\"https://realpython.com/\">Real Python</a></p>\n<blockquote><p>The realpython.com tutorial team is known for making the highest-quality Python tutorials available online.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://blog.miguelgrinberg.com/index\">Miguel Grinberg</a> (Here you can find the <a href=\"https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world\">Flask Mega Tutorial</a>. I used it myself as a starting point to build this site.)</p>\n<blockquote><p>I spent some of my spare time in the last month or so writing a tiny blog engine, and I really like how it came out.</p>\n</blockquote>\n</li>\n<li><p><a href=\"http://rahmonov.me/\"> Jahongir Rahmonov</a></p>\n<blockquote><p>I write about Python, Django, AngularJS and sometimes something non-technical.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://simpleisbetterthancomplex.com/\">simple is better than complex </a></p>\n<blockquote><p>Stories about Python, Django and Web Development.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://www.fullstackpython.com/blog.html\">Full Stack Python</a></p>\n<blockquote><p>Now you want to take your initial Python knowledge and make something real, like a web application to show off to friends or sell as a service to customers. That's where Full Stack Python comes in. You have come to the right place to learn everything you need to create, deploy and operate Python-powered applications.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://djangostars.com/blog/\">Diajngo Stars</a></p>\n<blockquote><p>In a blog we tell how to develop and grow sustainable and scalable Fintech, Taxi&amp;Transportation and Booking products. We also answer customers' most common questions and cover useful topics.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://inventwithpython.com/blog/\">The Invent with Python Blog</a></p>\n<blockquote><p>Learning to program makes you a smarter and more capable human being. Computers are not only the most common tool we encounter in our day-to-day lives, but also the most powerful. Even if your plans don't include becoming a software engineer writing code for the next Mars mission, you can find value in learning to code.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://overiq.com/blog/\">OVERIQ</a> (<a href=\"https://overiq.com/\">Here</a>, you can also find coruses on Python, Django, Flask, SQLAlchemy and C)</p>\n<blockquote><p>I'm a simple coder who have a knack with computer languages. My aim is to educate every one with the best of the language knowledge which is not easily available anywhere else in the Internet world.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://www.blog.pythonlibrary.org/\">The Mouse vs the Python</a></p>\n<blockquote><p>My name is Mike Driscoll. I am a computer programmer by trade and use Python almost exclusively to make my living.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://snarky.ca/\">Snarky</a></p>\n<blockquote><p>Python core developer. Dev lead for the Python extension for VS Code. Tall, snarky Canadian.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://www.pythonforthelab.com/blog/\">Python for the Lab</a></p>\n<blockquote><p>Python For The Lab is a collection of resources to help you start using Python for developing solutions in your lab.</p>\n</blockquote>\n</li>\n<li><p><a href=\"http://lucumr.pocoo.org/\">Armin Ronacher's Thoughts and Writings</a></p>\n<blockquote><p>My name is Armin Ronacher and I'm a passionate developer interested in web development, graphics, realtime rendering and tons of other stuff. I am one of the founding members of the Pocoo Team and lead developer on a couple of popular Python projects.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://thepythonguru.com/blog/\">The Python Guru</a></p>\n<blockquote><p>Become a better python developer</p>\n</blockquote>\n</li>\n<li><p><a href=\"http://pbpython.com/\">Practical Business Python</a></p>\n<blockquote><p>Taking care of business, one python script at a time.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://coolpythoncodes.com/\">Cool Python Codes</a></p>\n<blockquote><p>Code, The Revolution.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://allofyourbases.com/\">All your Base are Belong to Us</a></p>\n<blockquote><p>Physics. Data Science. General Geekery.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://www.pydanny.com/\">PyDanny</a></p>\n<blockquote><p>Hi, I'm Daniel Roy Greenfeld, and welcome to my blog. I write about Python, Django, and much more.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://pythontips.com/\">Python Tips</a></p>\n<blockquote><p>Your daily dose of bite sized python tips</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://pybit.es/pages/articles.html\">PyBites</a></p>\n<blockquote><p>A Community that Masters Python through Code Challenges</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://stackabuse.com/tag/python/\">Stack Abuse</a></p>\n</li>\n<li><p><a href=\"https://girisagar46.github.io/\">Sagar Giri</a></p>\n</li>\n<li><p><a href=\"https://pransukh.blogspot.com/\">Pran Sukh</a></p>\n</li>\n</ul>\n<h2>Weekly Mailing Lists</h2>\n<ul>\n<li><p><a href=\"https://www.python.org/community/lists/\">Python Mailing Lists and Newsgroups</a></p>\n<blockquote><p>Here's an overview of the mail and news resources for python.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://importpython.com/newsletter/\">Import Python</a></p>\n<blockquote><p>Insightful Articles, Tutorials, Projects, Videos, Tweets delivered in your inbox.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://pycoders.com/\">PyCoders Weekly</a></p>\n<blockquote><p>A free weekly e-mail newsletter, on Fridays, for those interested in python development and various topics around python.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://www.pythonweekly.com/\">Python Weekly</a></p>\n<blockquote><p>A free weekly newsletter featuring curated news, articles, new releases, jobs etc related to Python.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://www.djangoproject.com/\">Django Mailing Lists</a></p>\n<blockquote><p>Subscribe to one of our mailing lists to stay up to date with everything in the Django community</p>\n</blockquote>\n</li>\n</ul>\n<h2>Twitter</h2>\n<ul>\n<li><p><a href=\"https://twitter.com/gvanrossum\">Guido van Rossum</a></p>\n<blockquote><p>Python's creator and emeritus BDFL. Working at Dropbox. Computer History Museum Fellow.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://twitter.com/dbader_org\">Dan Bader</a></p>\n<blockquote><p>Full-stack Pythonista &amp; Python Coach. Write Clean + Pythonic code with my free tutorials: <a href=\"https://dbader.org/get-pythonic\">https://dbader.org/get-pythonic</a>  \ud83d\udc0dPreviously: Lead Dev at Mobify.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://twitter.com/dabeaz\">David Beazley</a></p>\n<blockquote><p>Author of the Python Essential Reference and Python Cookbook. I tweet deep thoughts about code, bikes, kids, and stuff.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://twitter.com/CoreyMSchafer\">Corey Schafer</a></p>\n<blockquote><p>Developer and Designer who enjoys woodworking, kayaking, astronomy, and building stuff.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://twitter.com/adrianholovaty\">Adrian Holovaty</a></p>\n<blockquote><p>Web developer, cocreator of @djangoproject, poster of YouTube guitar videos. Currently building @soundslice.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://twitter.com/miguelgrinberg\">Miguel Grinberg</a></p>\n<blockquote><p>I write software. And from time to time, I write or speak about writing software.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://twitter.com/Sentdex\">Harrison Kinsley</a></p>\n<blockquote><p>I like to build things. Programming is neat. INTJ <a href=\"https://hkinsley.com\">https://hkinsley.com</a> , <a href=\"https://pythonprogramming.net\">https://pythonprogramming.net</a> , <a href=\"http://sentdex.com\">http://sentdex.com</a>.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://twitter.com/AlSweigart\">Al Sweigart</a></p>\n<blockquote><p>Author of programming books. I use Python 4.2.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://twitter.com/mkennedy\">Michael Kennedy</a></p>\n<blockquote><p>A Python and MongoDB enthusiast, and an entrepreneur. Host of @TalkPython and @PythonBytes, founder of Talk Python Training. Python Software Foundation Fellow.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://twitter.com/ThePSF\">Python Software</a></p>\n<blockquote><p>The Python Software Foundation. For help with Python code, see comp.lang.python.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://twitter.com/PythonInsider\">Python Insider</a></p>\n<blockquote><p>The Python core development team.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://twitter.com/anacondainc\">Anaconda</a></p>\n<blockquote><p>Anaconda is the world\u2019s most popular and trusted #Python #DataScience platform, with over 6M users. We help people change the world.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://twitter.com/ProjectJupyter\">Project Jupyter</a></p>\n<blockquote><p>Multi-language interactive computing environments. The future home of the IPython notebook and related projects (same folks, same code, new name, new repos).</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://twitter.com/IPythonDev\">IPython Developers</a></p>\n<blockquote><p>Interactive Python tools. Please, Internet, it is IPython (or ipython), not iPython. Notebook and other language-agnostic parts are moving to @ProjectJupyter.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://twitter.com/djangoproject\">Django</a></p>\n<blockquote><p>A high-level Python Web framework that encourages rapid development and clean, pragmatic design. Tweets by Django Software Foundation and @jezdez.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://twitter.com/realpython\">Real Python</a></p>\n<blockquote><p>Python developer resources: #Python news, tutorials, code examples, snippets, articles, and more!</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://twitter.com/python_tip\">Daily Python Tip</a></p>\n<blockquote><p>One #python tip per day. Do you have any? Send it to <a href=\"http://bit.ly/pythontip\">http://bit.ly/pythontip</a> . Edited by @karlafej, @simecek, @pybites and... you?</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://twitter.com/pybites\">Pybites</a></p>\n<blockquote><p>Python code Challenges, Articles and News.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://twitter.com/pythontrending\">Python Trending</a></p>\n<blockquote><p>trending Python repositories on GitHub.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://twitter.com/importpython\">Import Python</a></p>\n<blockquote><p>Python Newsletter <a href=\"https://clicktracker.in/VkXRR7Po\">https://clicktracker.in/VkXRR7Po</a>  keeps you updated on what's happening in the world of Python.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://twitter.com/fullstackpython\">Full Stack Python</a></p>\n<blockquote><p>Tweets links to great #Python tutorials. Creating <a href=\"http://fullstackpython.com\">http://fullstackpython.com</a> , <a href=\"http://bit.ly/deploy-python\">http://bit.ly/deploy-python</a>  &amp; <a href=\"http://bit.ly/python-entrepreneurs\">http://bit.ly/python-entrepreneurs</a> \u2026. Run by @mattmakai \ud83d\ude0e</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://twitter.com/PythonHub\">Python Hub</a></p>\n<blockquote><p>News &amp; links about Python programming.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://twitter.com/getpy\">Get Python</a></p>\n<blockquote><p>Tweets for Python enthusiasts - by @originalankur.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://twitter.com/PythonWeekly\">Python Weekly</a></p>\n<blockquote><p>Python Weekly is a free weekly newsletter, which features curated news, articles, new releases, tools and libraries, events, jobs etc related to Python.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://twitter.com/PythonStack\">Python StackOverflow</a></p>\n<blockquote><p>StackOverflow feed of Python questions matching certain criteria.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://twitter.com/SciPyTip\">Scientific Python</a></p>\n<blockquote><p>Tweets about SciPy (Scientific Python) and related topics from @JohnDCook.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://twitter.com/pycoders\">Pycoders Weekly</a></p>\n<blockquote><p>Your weekly dose of all things Python! Python tweets by @mgrouchy and @myusuf3.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://twitter.com/BoostLog_Python\">Boostlog - Python</a></p>\n<blockquote><p>A blogging platform developers. Here will introduce the Python article posted on #Boostlog.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://twitter.com/pyCheatsheet\">Python Cheatsheet</a> \ud83e\udd2d</p>\n<blockquote><p>Python cheat sheet and Articles for Beginner and Advanced Developers.</p>\n</blockquote>\n</li>\n</ul>\n<h2>Podcasts</h2>\n<ul>\n<li><p><a href=\"https://twitter.com/pythonbytes\">Python Bytes</a></p>\n<blockquote><p>Python Headlines delivered directly to your earbuds.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://talkpython.fm/\">Talk Python To Me</a></p>\n<blockquote><p>A podcast on Python and related technologies.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://www.pythonpodcast.com/\">The Python Podcast.<em> init </em></a></p>\n<blockquote><p>Each interview explores the motivations, challenges, and experiences behind the software that you use every day.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://testandcode.com/\">Test &amp; Code - Software Testing, Developtment, Python</a></p>\n<blockquote><p>A Podcast about Software Testing, Software Development, and Python</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://djangochat.com/\">Django Chat</a></p>\n<blockquote><p>A weekly <em>podcast</em> on the <em>Django</em> Web Framework. Build websites with <em>Python</em>!</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://friday.hirelofty.com/\">Friday Afternoon Deploy: A Developer Podcast</a></p>\n<blockquote><p>Python and Django, Ruby on Rails, Golang.</p>\n</blockquote>\n</li>\n</ul>\n<h2>YouTube</h2>\n<p>This list is going to be short, just my favorites. If you want a realy complete one, check <a href=\"https://realpython.com/python-youtube-channels/\">The Ultimate List of Python YouTube Channels</a> from <a href=\"https://realpython.com/\">Real Python</a>.</p>\n<ul>\n<li><p><a href=\"https://www.youtube.com/channel/UCtxCXg-UvSnTKPOzLH4wJaQ\">Coding Tech</a></p>\n<blockquote><p>Coding Tech partners with the tech conferences around the world that provided Coding Tech with their EXPLICIT permissions to republish videos on this channel.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://www.youtube.com/channel/UCCezIgC97PvUuR4_gbFUs5g\">Corey Schafer</a></p>\n<blockquote><p>This channel is focused on creating tutorials and walkthroughs for software developers, programmers, and engineers.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://www.youtube.com/channel/UC-QDfvrRIDB6F0bIO4I4HkQ\">Pretty Printed</a></p>\n<blockquote><p>I'm Anthony. I make programming videos.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://www.youtube.com/channel/UCW6TXMZ5Pq6yL6_k5NZ2e0Q\">Socratica</a></p>\n<blockquote><p>Socratica makes high-quality educational videos on math and science. New videos every week!</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://www.youtube.com/channel/UC6HfeAa0vWeSWS6IcNAjZ2A\">Sebastiaan Math\u00f4t</a></p>\n<blockquote><p>A mix of videos about programming in Python and OpenSesame, and psychology-related topics.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://www.youtube.com/channel/UCfzlCWGWYyIQ0aLC5w48gBQ\">sentdex</a></p>\n<blockquote><p>Python Programming tutorials, going further than just the basics. Learn about machine learning, finance, data analysis, robotics, web development, game development and more.</p>\n</blockquote>\n</li>\n</ul>\n<h2>Questions</h2>\n<ul>\n<li><p><a href=\"https://stackoverflow.com/\">Stack Overflow</a></p>\n<blockquote><p>Each month, over 50 million developers come to Stack Overflow to learn, share their knowledge, and build their careers.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://www.quora.com/\">Quora</a></p>\n<blockquote><p>A place to share knowledge and better understand the world.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://www.python.org/community/forums/\">Python Community Forums</a></p>\n<blockquote><p>If you're looking for a forum in your native language, please check out the local user groups page at the Python Wiki.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://www.reddit.com/r/Python/\">r/python</a></p>\n<blockquote><p>News about the dynamic, interpreted, interactive, object-oriented, extensible programming language Python.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://www.reddit.com/r/pythontips/\">r/pythontips</a></p>\n<blockquote><p>A place to get a quick fix of python tips and tricks to make you a better Pythonista.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://www.reddit.com/r/learnpython/\">r/learnpython</a></p>\n<blockquote><p>Subreddit for posting content, questions, and asking for general advice about learning the Python programming language.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://www.reddit.com/r/django/\">r/django</a></p>\n<blockquote><p>Django subreddit</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://www.reddit.com/r/djangolearning/\">r/djangolearning</a></p>\n<blockquote><p>A group dedicated to learning Django, a Python web framework.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://www.reddit.com/r/flask/\">r/flask</a></p>\n<blockquote><p>Flask is a Python micro-framework for web development. Flask is easy to get started and a great way to build web sites and web applications.</p>\n</blockquote>\n</li>\n</ul>\n<h2>Conclusion</h2>\n<p>Just two things: First, <em>we have no excuse</em>. And second, for all the people who try to put quality content online, for the ones that do it in their spare time and for free: subscribe to their channels, give them thumbs up even before you finish watching their videos (so you don't forget later). If you read an article you liked, share it and disable your ad-blocker for their site. Support Them.</p>\n<p>As always, if you think something is missing, leave a comment and I will update the post later.</p>\n<p>Have a nice day, and eat what makes you happy!</p>"
            },
            "id": "http://www.pythoncheatsheet.org/blog/python-follow-read-and-ask/",
            "guidislink": false
        },
        {
            "title": "Python Sets: What, Why and How",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://www.pythoncheatsheet.org/latest/feed/",
                "value": "Python Sets: What, Why and How"
            },
            "links": [
                {
                    "rel": "alternate",
                    "type": "text/html",
                    "href": "http://www.pythoncheatsheet.org/blog/python-sets-what-why-how/"
                }
            ],
            "link": "http://www.pythoncheatsheet.org/blog/python-sets-what-why-how/",
            "summary": "<p>Python comes equipped with several built-in data types to help us organize our data. These structures include lists, dictionaries, tuples and <strong>sets</strong>.</p>\n<p>From the Python 3 documentation:</p>\n<blockquote><p>A set is an <em>unordered collection</em> with no <em>duplicate elements</em>. Basic uses include <em>membership testing</em> and <em>eliminating duplicate entries</em>. Set objects also support mathematical operations like <em>union</em>, <em>intersection</em>, <em>difference</em>, and <em>symmetric difference</em>.</p>\n</blockquote>\n<p>In this article, we are going to review and see examples of every one of the elements listed in the above definition. Let's start right away and see how we can create them.</p>\n<h3>Initializing a Set</h3>\n<p>There are two ways to create a set: one is to provide the built-in function <code>set()</code> with a list of elements, and the other is to use the curly braces <code>{}</code>.</p>\n<p>Initializing a set using the <code>set()</code> built-in function:</p>\n<pre><code class=\"lang-python\">&gt;&gt;&gt; s1 = set([1, 2, 3])\n&gt;&gt;&gt; s1\n{1, 2, 3}\n&gt;&gt;&gt; type(s1)\n&lt;class 'set'&gt;\n</code></pre>\n<p>Initializing a set using curly braces <code>{}</code></p>\n<pre><code class=\"lang-python\">&gt;&gt;&gt; s2 = {3, 4, 5}\n&gt;&gt;&gt; s2\n{3, 4, 5}\n&gt;&gt;&gt; type(s2)\n&lt;class 'set'&gt;\n&gt;&gt;&gt;\n</code></pre>\n<p>As you can see, both options are valid. The problem comes when what we want is an empty one:</p>\n<pre><code class=\"lang-python\">&gt;&gt;&gt; s = {}\n&gt;&gt;&gt; type(s)\n&lt;class 'dict'&gt;\n</code></pre>\n<p>That's right, we will get a dictionary instead of a set if we use empty curly braces =)</p>\n<p>It's a good moment to mention that for the sake of simplicity, all the examples provided in this article will use single digit integers, but sets can have all the <a href=\"https://docs.python.org/3/glossary.html#term-hashable\">hashable</a> data types that Python support. In other words, integers, strings and tuples, but not <em>mutable</em> items like <em>lists</em> or <em>dictionaries</em>:</p>\n<pre><code class=\"lang-python\">&gt;&gt;&gt; s = {1, 'coffee', [4, 'python']}\nTraceback (most recent call last):\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\nTypeError: unhashable type: 'list'\n</code></pre>\n<p>Now that you know how to create a set and what type of elements it can contain, let's continue and see <em>why</em> we should always have them in our toolkit.</p>\n<h2>Why You Should Use Them</h2>\n<p>When writing code, you can do it in more than a single way. Some are considered to be pretty bad, and others, <em>clear, concise and maintainable</em>. Or \"<a href=\"http://docs.python-guide.org/en/latest/writing/style/\"><em>pythonic</em></a>\".</p>\n<p>From <a href=\"http://docs.python-guide.org/en/latest/\">The Hitchhiker\u2019s Guide to Python</a>:</p>\n<blockquote><p>When a veteran Python developer (a Pythonista) calls portions of code not \u201cPythonic\u201d, they usually mean that these lines of code do not follow the common guidelines and fail to express its intent in what is considered the best (hear: most readable) way.</p>\n</blockquote>\n<p>Let's start exploring the way that Python sets can help us not just with readability, but also speeding up our programs execution time.</p>\n<h3>Unordered Collection of Elements</h3>\n<p>First things first: you can't access a set element using indexes.</p>\n<pre><code class=\"lang-python\">&gt;&gt;&gt; s = {1, 2, 3}\n&gt;&gt;&gt; s[0]\nTraceback (most recent call last):\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\nTypeError: 'set' object does not support indexing\n</code></pre>\n<p>Or modify them with slices:</p>\n<pre><code class=\"lang-python\">&gt;&gt;&gt; s[0:2]\nTraceback (most recent call last):\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\nTypeError: 'set' object is not subscriptable\n</code></pre>\n<p>BUT, if what we need is to remove duplicates, or do mathematical operations like combining lists (unions), we can, and <em>SHOULD</em> always use sets.</p>\n<p>I have to mention that when iterating over, sets are outperformed by lists, so prefer them if that is what you need. Why? Well, this article does not intend to explain the inner workings of sets, but if you are interested, here are a couple of links where you can read about it:</p>\n<ul>\n<li><a href=\"https://wiki.python.org/moin/TimeComplexity\">Time Complexity</a></li>\n<li><a href=\"https://stackoverflow.com/questions/3949310/how-is-set-implemented\">How is set() implemented?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/2831212/python-sets-vs-lists\">Python Sets vs Lists</a></li>\n<li><a href=\"https://mail.python.org/pipermail/python-list/2011-June/606738.html\">Is there any advantage or disadvantage to using sets over list comps to ensure a list of unique entries?</a></li>\n</ul>\n<h3>No Duplicate Items</h3>\n<p>While writing this I cannot stop thinking in all the times I used the <em>for</em> loop and the <em>if</em> statement to check and remove duplicate elements in a list. My face turns red remembering that, more than once, I wrote something like this:</p>\n<pre><code class=\"lang-python\">&gt;&gt;&gt; my_list = [1, 2, 3, 2, 3, 4]\n&gt;&gt;&gt; no_duplicate_list = []\n&gt;&gt;&gt; for item in my_list:\n...     if item not in no_duplicate_list:\n...             no_duplicate_list.append(item)\n...\n&gt;&gt;&gt; no_duplicate_list\n[1, 2, 3, 4]\n</code></pre>\n<p>Or used a list comprehension:</p>\n<pre><code class=\"lang-python\">&gt;&gt;&gt; my_list = [1, 2, 3, 2, 3, 4]\n&gt;&gt;&gt; no_duplicate_list = []\n&gt;&gt;&gt; [no_duplicate_list.append(item) for item in my_list if item not in no_duplicate_list]\n[None, None, None, None]\n&gt;&gt;&gt; no_duplicate_list\n[1, 2, 3, 4]\n</code></pre>\n<p>But it's ok, nothing of that matters anymore because we now have the sets in our arsenal:</p>\n<pre><code class=\"lang-python\">&gt;&gt;&gt; my_list = [1, 2, 3, 2, 3, 4]\n&gt;&gt;&gt; no_duplicate_list = list(set(my_list))\n&gt;&gt;&gt; no_duplicate_list\n[1, 2, 3, 4]\n&gt;&gt;&gt;\n</code></pre>\n<p>Now let's use the <em>timeit</em> module and see the execution time of lists and sets when removing duplicates:</p>\n<pre><code class=\"lang-python\">&gt;&gt;&gt; from timeit import timeit\n&gt;&gt;&gt; def no_duplicates(list):\n...     no_duplicate_list = []\n...     [no_duplicate_list.append(item) for item in list if item not in no_duplicate_list]\n...     return no_duplicate_list\n...\n&gt;&gt;&gt; # first, let's see how the list perform:\n&gt;&gt;&gt; print(timeit('no_duplicates([1, 2, 3, 1, 7])', globals=globals(), number=1000))\n0.0018683355819786227\n</code></pre>\n<pre><code class=\"lang-python\">&gt;&gt;&gt; from timeit import timeit\n&gt;&gt;&gt; # and the set:\n&gt;&gt;&gt; print(timeit('list(set([1, 2, 3, 1, 2, 3, 4]))', number=1000))\n0.0010220493243764395\n&gt;&gt;&gt; # faster and cleaner =)\n</code></pre>\n<p>Not only we write <em>fewer lines</em> with sets than with lists comprehensions, we also obtain more <em>readable</em> and <em>performant</em> code.</p>\n<p>Note: remember that sets are unordered, so there is no guarantee that when converting them back to a list the order of the elements is going to be preserved.</p>\n<p>From the <a href=\"https://www.python.org/dev/peps/pep-0020/\">Zen of Python</a>:</p>\n<blockquote><p>Beautiful is better than ugly. &lt;br&gt;\nExplicit is better than implicit.&lt;br&gt;\nSimple is better than complex.&lt;br&gt;\nFlat is better than nested.</p>\n</blockquote>\n<p>Aren't sets just Beautiful, Explicit, Simple and Flat?  =)</p>\n<h3>Membership  Tests</h3>\n<p>Every time we use an <em>if</em> statement to check if an element is, for example, in a list, you are doing a membership test:</p>\n<pre><code class=\"lang-python\">my_list = [1, 2, 3]\n&gt;&gt;&gt; if 2 in my_list:\n...     print('Yes, this is a membership test!')\n...\nYes, this is a membership test!\n</code></pre>\n<p>And sets are more performant than lists when doing them:</p>\n<pre><code class=\"lang-python\">&gt;&gt;&gt; from timeit import timeit\n&gt;&gt;&gt; def in_test(iterable):\n...     for i in range(1000):\n...             if i in iterable:\n...                     pass\n...\n&gt;&gt;&gt; timeit('in_test(iterable)',\n... setup=&quot;from __main__ import in_test; iterable = list(range(1000))&quot;,\n... number=1000)\n12.459663048726043\n</code></pre>\n<pre><code class=\"lang-python\">&gt;&gt;&gt; from timeit import timeit\n&gt;&gt;&gt; def in_test(iterable):\n...     for i in range(1000):\n...             if i in iterable:\n...                     pass\n...\n&gt;&gt;&gt; timeit('in_test(iterable)',\n... setup=&quot;from __main__ import in_test; iterable = set(range(1000))&quot;,\n... number=1000)\n0.12354438152988223\n&gt;&gt;&gt;\n</code></pre>\n<p>Note: the above tests come from <a href=\"https://stackoverflow.com/questions/2831212/python-sets-vs-lists\">this</a> Stack Overflow thread.</p>\n<p>So if you are doing comparisons like this in huge lists, it should speed you a good bit if you convert that list into a set.</p>\n<h2>How to Use Them</h2>\n<p>Now that you know what a set is and why you should use them, let's do a quick tour and see how can we modify and operate with them.</p>\n<h3>Adding Elements</h3>\n<p>Depending on the number of elements to add, we will have to choose between the  <code>add()</code> and <code>update()</code> methods.</p>\n<p><code>add()</code> Will add a single element:</p>\n<pre><code class=\"lang-python\">&gt;&gt;&gt; s = {1, 2, 3}\n&gt;&gt;&gt; s.add(4)\n&gt;&gt;&gt; s\n{1, 2, 3, 4}\n</code></pre>\n<p>And <code>update()</code> multiple ones:</p>\n<pre><code class=\"lang-python\">&gt;&gt;&gt; s = {1, 2, 3}\n&gt;&gt;&gt; s.update([2, 3, 4, 5, 6])\n&gt;&gt;&gt; s\n{1, 2, 3, 4, 5, 6}\n</code></pre>\n<p>Remember, sets remove duplicates.</p>\n<h3>Removing Elements</h3>\n<p>If you want to be alerted when your code tries to remove an element that is not in the set, use <code>remove()</code>. Otherwise, <code>discard()</code> provides a good alternative:</p>\n<pre><code class=\"lang-python\">&gt;&gt;&gt; s = {1, 2, 3}\n&gt;&gt;&gt; s.remove(3)\n&gt;&gt;&gt; s\n{1, 2}\n&gt;&gt;&gt; s.remove(3)\nTraceback (most recent call last):\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\nKeyError: 3\n</code></pre>\n<p><code>discard()</code> won't raise any errors:</p>\n<pre><code class=\"lang-python\">&gt;&gt;&gt; s = {1, 2, 3}\n&gt;&gt;&gt; s.discard(3)\n&gt;&gt;&gt; s\n{1, 2}\n&gt;&gt;&gt; s.discard(3)\n&gt;&gt;&gt; # nothing happens!\n</code></pre>\n<p>We can also use <code>pop()</code> to randomly discard an element:</p>\n<pre><code class=\"lang-python\">&gt;&gt;&gt; s = {1, 2, 3, 4, 5}\n&gt;&gt;&gt; s.pop()  # removes an arbitrary element\n1\n&gt;&gt;&gt; s\n{2, 3, 4, 5}\n</code></pre>\n<p>Or <code>clear()</code> to remove all the values from a set:</p>\n<pre><code class=\"lang-python\">&gt;&gt;&gt; s = {1, 2, 3, 4, 5}\n&gt;&gt;&gt; s.clear()  # discard all the items\n&gt;&gt;&gt; s\nset()\n</code></pre>\n<h3>union()</h3>\n<p><code>union()</code> or <code>|</code> will create a new set that contains all the elements from the sets we provide:</p>\n<pre><code class=\"lang-python\">&gt;&gt;&gt; s1 = {1, 2, 3}\n&gt;&gt;&gt; s2 = {3, 4, 5}\n&gt;&gt;&gt; s1.union(s2)  # or 's1 | s2'\n{1, 2, 3, 4, 5}\n</code></pre>\n<h3>intersection()</h3>\n<p><code>intersection</code>  or <code>&amp;</code>  will return a set containing only the elements that are common in all of them:</p>\n<pre><code class=\"lang-python\">&gt;&gt;&gt; s1 = {1, 2, 3}\n&gt;&gt;&gt; s2 = {2, 3, 4}\n&gt;&gt;&gt; s3 = {3, 4, 5}\n&gt;&gt;&gt; s1.intersection(s2, s3)  # or 's1 &amp; s2 &amp; s3'\n{3}\n</code></pre>\n<h3>difference()</h3>\n<p>Using <code>diference()</code> or <code>-</code>, creates a new set with the values that are in \"s1\" but not in \"s2\":</p>\n<pre><code class=\"lang-python\">&gt;&gt;&gt; s1 = {1, 2, 3}\n&gt;&gt;&gt; s2 = {2, 3, 4}\n&gt;&gt;&gt; s1.difference(s2)  # or 's1 - s2'\n{1}\n</code></pre>\n<h3>symmetric_diference()</h3>\n<p><code>symetric_difference</code> or <code>^</code> will return all the values that are not common between the sets.</p>\n<pre><code class=\"lang-python\">&gt;&gt;&gt; s1 = {1, 2, 3}\n&gt;&gt;&gt; s2 = {2, 3, 4}\n&gt;&gt;&gt; s1.symmetric_difference(s2)  # or 's1 ^ s2'\n{1, 4}\n</code></pre>\n<h2>Conclusions</h2>\n<p>I hope that after reading this article you know what a set is, how to manipulate their elements and the operations they can perform. Knowing when to use a set will definitely help you write cleaner code and speed up your programs.</p>\n<p>If you have any doubts, please leave a comment and I will gladly try to answer them. Also, don't forget that if you already understand sets, they have their own <a href=\"https://www.pythoncheatsheet.org/#sets\">place</a> in the <a href=\"https://www.pythoncheatsheet.org/\">Python Cheatsheet</a>, where you can have a quick reference and refresh what you already know.</p>",
            "summary_detail": {
                "type": "text/html",
                "language": null,
                "base": "https://www.pythoncheatsheet.org/latest/feed/",
                "value": "<p>Python comes equipped with several built-in data types to help us organize our data. These structures include lists, dictionaries, tuples and <strong>sets</strong>.</p>\n<p>From the Python 3 documentation:</p>\n<blockquote><p>A set is an <em>unordered collection</em> with no <em>duplicate elements</em>. Basic uses include <em>membership testing</em> and <em>eliminating duplicate entries</em>. Set objects also support mathematical operations like <em>union</em>, <em>intersection</em>, <em>difference</em>, and <em>symmetric difference</em>.</p>\n</blockquote>\n<p>In this article, we are going to review and see examples of every one of the elements listed in the above definition. Let's start right away and see how we can create them.</p>\n<h3>Initializing a Set</h3>\n<p>There are two ways to create a set: one is to provide the built-in function <code>set()</code> with a list of elements, and the other is to use the curly braces <code>{}</code>.</p>\n<p>Initializing a set using the <code>set()</code> built-in function:</p>\n<pre><code class=\"lang-python\">&gt;&gt;&gt; s1 = set([1, 2, 3])\n&gt;&gt;&gt; s1\n{1, 2, 3}\n&gt;&gt;&gt; type(s1)\n&lt;class 'set'&gt;\n</code></pre>\n<p>Initializing a set using curly braces <code>{}</code></p>\n<pre><code class=\"lang-python\">&gt;&gt;&gt; s2 = {3, 4, 5}\n&gt;&gt;&gt; s2\n{3, 4, 5}\n&gt;&gt;&gt; type(s2)\n&lt;class 'set'&gt;\n&gt;&gt;&gt;\n</code></pre>\n<p>As you can see, both options are valid. The problem comes when what we want is an empty one:</p>\n<pre><code class=\"lang-python\">&gt;&gt;&gt; s = {}\n&gt;&gt;&gt; type(s)\n&lt;class 'dict'&gt;\n</code></pre>\n<p>That's right, we will get a dictionary instead of a set if we use empty curly braces =)</p>\n<p>It's a good moment to mention that for the sake of simplicity, all the examples provided in this article will use single digit integers, but sets can have all the <a href=\"https://docs.python.org/3/glossary.html#term-hashable\">hashable</a> data types that Python support. In other words, integers, strings and tuples, but not <em>mutable</em> items like <em>lists</em> or <em>dictionaries</em>:</p>\n<pre><code class=\"lang-python\">&gt;&gt;&gt; s = {1, 'coffee', [4, 'python']}\nTraceback (most recent call last):\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\nTypeError: unhashable type: 'list'\n</code></pre>\n<p>Now that you know how to create a set and what type of elements it can contain, let's continue and see <em>why</em> we should always have them in our toolkit.</p>\n<h2>Why You Should Use Them</h2>\n<p>When writing code, you can do it in more than a single way. Some are considered to be pretty bad, and others, <em>clear, concise and maintainable</em>. Or \"<a href=\"http://docs.python-guide.org/en/latest/writing/style/\"><em>pythonic</em></a>\".</p>\n<p>From <a href=\"http://docs.python-guide.org/en/latest/\">The Hitchhiker\u2019s Guide to Python</a>:</p>\n<blockquote><p>When a veteran Python developer (a Pythonista) calls portions of code not \u201cPythonic\u201d, they usually mean that these lines of code do not follow the common guidelines and fail to express its intent in what is considered the best (hear: most readable) way.</p>\n</blockquote>\n<p>Let's start exploring the way that Python sets can help us not just with readability, but also speeding up our programs execution time.</p>\n<h3>Unordered Collection of Elements</h3>\n<p>First things first: you can't access a set element using indexes.</p>\n<pre><code class=\"lang-python\">&gt;&gt;&gt; s = {1, 2, 3}\n&gt;&gt;&gt; s[0]\nTraceback (most recent call last):\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\nTypeError: 'set' object does not support indexing\n</code></pre>\n<p>Or modify them with slices:</p>\n<pre><code class=\"lang-python\">&gt;&gt;&gt; s[0:2]\nTraceback (most recent call last):\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\nTypeError: 'set' object is not subscriptable\n</code></pre>\n<p>BUT, if what we need is to remove duplicates, or do mathematical operations like combining lists (unions), we can, and <em>SHOULD</em> always use sets.</p>\n<p>I have to mention that when iterating over, sets are outperformed by lists, so prefer them if that is what you need. Why? Well, this article does not intend to explain the inner workings of sets, but if you are interested, here are a couple of links where you can read about it:</p>\n<ul>\n<li><a href=\"https://wiki.python.org/moin/TimeComplexity\">Time Complexity</a></li>\n<li><a href=\"https://stackoverflow.com/questions/3949310/how-is-set-implemented\">How is set() implemented?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/2831212/python-sets-vs-lists\">Python Sets vs Lists</a></li>\n<li><a href=\"https://mail.python.org/pipermail/python-list/2011-June/606738.html\">Is there any advantage or disadvantage to using sets over list comps to ensure a list of unique entries?</a></li>\n</ul>\n<h3>No Duplicate Items</h3>\n<p>While writing this I cannot stop thinking in all the times I used the <em>for</em> loop and the <em>if</em> statement to check and remove duplicate elements in a list. My face turns red remembering that, more than once, I wrote something like this:</p>\n<pre><code class=\"lang-python\">&gt;&gt;&gt; my_list = [1, 2, 3, 2, 3, 4]\n&gt;&gt;&gt; no_duplicate_list = []\n&gt;&gt;&gt; for item in my_list:\n...     if item not in no_duplicate_list:\n...             no_duplicate_list.append(item)\n...\n&gt;&gt;&gt; no_duplicate_list\n[1, 2, 3, 4]\n</code></pre>\n<p>Or used a list comprehension:</p>\n<pre><code class=\"lang-python\">&gt;&gt;&gt; my_list = [1, 2, 3, 2, 3, 4]\n&gt;&gt;&gt; no_duplicate_list = []\n&gt;&gt;&gt; [no_duplicate_list.append(item) for item in my_list if item not in no_duplicate_list]\n[None, None, None, None]\n&gt;&gt;&gt; no_duplicate_list\n[1, 2, 3, 4]\n</code></pre>\n<p>But it's ok, nothing of that matters anymore because we now have the sets in our arsenal:</p>\n<pre><code class=\"lang-python\">&gt;&gt;&gt; my_list = [1, 2, 3, 2, 3, 4]\n&gt;&gt;&gt; no_duplicate_list = list(set(my_list))\n&gt;&gt;&gt; no_duplicate_list\n[1, 2, 3, 4]\n&gt;&gt;&gt;\n</code></pre>\n<p>Now let's use the <em>timeit</em> module and see the execution time of lists and sets when removing duplicates:</p>\n<pre><code class=\"lang-python\">&gt;&gt;&gt; from timeit import timeit\n&gt;&gt;&gt; def no_duplicates(list):\n...     no_duplicate_list = []\n...     [no_duplicate_list.append(item) for item in list if item not in no_duplicate_list]\n...     return no_duplicate_list\n...\n&gt;&gt;&gt; # first, let's see how the list perform:\n&gt;&gt;&gt; print(timeit('no_duplicates([1, 2, 3, 1, 7])', globals=globals(), number=1000))\n0.0018683355819786227\n</code></pre>\n<pre><code class=\"lang-python\">&gt;&gt;&gt; from timeit import timeit\n&gt;&gt;&gt; # and the set:\n&gt;&gt;&gt; print(timeit('list(set([1, 2, 3, 1, 2, 3, 4]))', number=1000))\n0.0010220493243764395\n&gt;&gt;&gt; # faster and cleaner =)\n</code></pre>\n<p>Not only we write <em>fewer lines</em> with sets than with lists comprehensions, we also obtain more <em>readable</em> and <em>performant</em> code.</p>\n<p>Note: remember that sets are unordered, so there is no guarantee that when converting them back to a list the order of the elements is going to be preserved.</p>\n<p>From the <a href=\"https://www.python.org/dev/peps/pep-0020/\">Zen of Python</a>:</p>\n<blockquote><p>Beautiful is better than ugly. &lt;br&gt;\nExplicit is better than implicit.&lt;br&gt;\nSimple is better than complex.&lt;br&gt;\nFlat is better than nested.</p>\n</blockquote>\n<p>Aren't sets just Beautiful, Explicit, Simple and Flat?  =)</p>\n<h3>Membership  Tests</h3>\n<p>Every time we use an <em>if</em> statement to check if an element is, for example, in a list, you are doing a membership test:</p>\n<pre><code class=\"lang-python\">my_list = [1, 2, 3]\n&gt;&gt;&gt; if 2 in my_list:\n...     print('Yes, this is a membership test!')\n...\nYes, this is a membership test!\n</code></pre>\n<p>And sets are more performant than lists when doing them:</p>\n<pre><code class=\"lang-python\">&gt;&gt;&gt; from timeit import timeit\n&gt;&gt;&gt; def in_test(iterable):\n...     for i in range(1000):\n...             if i in iterable:\n...                     pass\n...\n&gt;&gt;&gt; timeit('in_test(iterable)',\n... setup=&quot;from __main__ import in_test; iterable = list(range(1000))&quot;,\n... number=1000)\n12.459663048726043\n</code></pre>\n<pre><code class=\"lang-python\">&gt;&gt;&gt; from timeit import timeit\n&gt;&gt;&gt; def in_test(iterable):\n...     for i in range(1000):\n...             if i in iterable:\n...                     pass\n...\n&gt;&gt;&gt; timeit('in_test(iterable)',\n... setup=&quot;from __main__ import in_test; iterable = set(range(1000))&quot;,\n... number=1000)\n0.12354438152988223\n&gt;&gt;&gt;\n</code></pre>\n<p>Note: the above tests come from <a href=\"https://stackoverflow.com/questions/2831212/python-sets-vs-lists\">this</a> Stack Overflow thread.</p>\n<p>So if you are doing comparisons like this in huge lists, it should speed you a good bit if you convert that list into a set.</p>\n<h2>How to Use Them</h2>\n<p>Now that you know what a set is and why you should use them, let's do a quick tour and see how can we modify and operate with them.</p>\n<h3>Adding Elements</h3>\n<p>Depending on the number of elements to add, we will have to choose between the  <code>add()</code> and <code>update()</code> methods.</p>\n<p><code>add()</code> Will add a single element:</p>\n<pre><code class=\"lang-python\">&gt;&gt;&gt; s = {1, 2, 3}\n&gt;&gt;&gt; s.add(4)\n&gt;&gt;&gt; s\n{1, 2, 3, 4}\n</code></pre>\n<p>And <code>update()</code> multiple ones:</p>\n<pre><code class=\"lang-python\">&gt;&gt;&gt; s = {1, 2, 3}\n&gt;&gt;&gt; s.update([2, 3, 4, 5, 6])\n&gt;&gt;&gt; s\n{1, 2, 3, 4, 5, 6}\n</code></pre>\n<p>Remember, sets remove duplicates.</p>\n<h3>Removing Elements</h3>\n<p>If you want to be alerted when your code tries to remove an element that is not in the set, use <code>remove()</code>. Otherwise, <code>discard()</code> provides a good alternative:</p>\n<pre><code class=\"lang-python\">&gt;&gt;&gt; s = {1, 2, 3}\n&gt;&gt;&gt; s.remove(3)\n&gt;&gt;&gt; s\n{1, 2}\n&gt;&gt;&gt; s.remove(3)\nTraceback (most recent call last):\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\nKeyError: 3\n</code></pre>\n<p><code>discard()</code> won't raise any errors:</p>\n<pre><code class=\"lang-python\">&gt;&gt;&gt; s = {1, 2, 3}\n&gt;&gt;&gt; s.discard(3)\n&gt;&gt;&gt; s\n{1, 2}\n&gt;&gt;&gt; s.discard(3)\n&gt;&gt;&gt; # nothing happens!\n</code></pre>\n<p>We can also use <code>pop()</code> to randomly discard an element:</p>\n<pre><code class=\"lang-python\">&gt;&gt;&gt; s = {1, 2, 3, 4, 5}\n&gt;&gt;&gt; s.pop()  # removes an arbitrary element\n1\n&gt;&gt;&gt; s\n{2, 3, 4, 5}\n</code></pre>\n<p>Or <code>clear()</code> to remove all the values from a set:</p>\n<pre><code class=\"lang-python\">&gt;&gt;&gt; s = {1, 2, 3, 4, 5}\n&gt;&gt;&gt; s.clear()  # discard all the items\n&gt;&gt;&gt; s\nset()\n</code></pre>\n<h3>union()</h3>\n<p><code>union()</code> or <code>|</code> will create a new set that contains all the elements from the sets we provide:</p>\n<pre><code class=\"lang-python\">&gt;&gt;&gt; s1 = {1, 2, 3}\n&gt;&gt;&gt; s2 = {3, 4, 5}\n&gt;&gt;&gt; s1.union(s2)  # or 's1 | s2'\n{1, 2, 3, 4, 5}\n</code></pre>\n<h3>intersection()</h3>\n<p><code>intersection</code>  or <code>&amp;</code>  will return a set containing only the elements that are common in all of them:</p>\n<pre><code class=\"lang-python\">&gt;&gt;&gt; s1 = {1, 2, 3}\n&gt;&gt;&gt; s2 = {2, 3, 4}\n&gt;&gt;&gt; s3 = {3, 4, 5}\n&gt;&gt;&gt; s1.intersection(s2, s3)  # or 's1 &amp; s2 &amp; s3'\n{3}\n</code></pre>\n<h3>difference()</h3>\n<p>Using <code>diference()</code> or <code>-</code>, creates a new set with the values that are in \"s1\" but not in \"s2\":</p>\n<pre><code class=\"lang-python\">&gt;&gt;&gt; s1 = {1, 2, 3}\n&gt;&gt;&gt; s2 = {2, 3, 4}\n&gt;&gt;&gt; s1.difference(s2)  # or 's1 - s2'\n{1}\n</code></pre>\n<h3>symmetric_diference()</h3>\n<p><code>symetric_difference</code> or <code>^</code> will return all the values that are not common between the sets.</p>\n<pre><code class=\"lang-python\">&gt;&gt;&gt; s1 = {1, 2, 3}\n&gt;&gt;&gt; s2 = {2, 3, 4}\n&gt;&gt;&gt; s1.symmetric_difference(s2)  # or 's1 ^ s2'\n{1, 4}\n</code></pre>\n<h2>Conclusions</h2>\n<p>I hope that after reading this article you know what a set is, how to manipulate their elements and the operations they can perform. Knowing when to use a set will definitely help you write cleaner code and speed up your programs.</p>\n<p>If you have any doubts, please leave a comment and I will gladly try to answer them. Also, don't forget that if you already understand sets, they have their own <a href=\"https://www.pythoncheatsheet.org/#sets\">place</a> in the <a href=\"https://www.pythoncheatsheet.org/\">Python Cheatsheet</a>, where you can have a quick reference and refresh what you already know.</p>"
            },
            "id": "http://www.pythoncheatsheet.org/blog/python-sets-what-why-how/",
            "guidislink": false
        },
        {
            "title": "Hello, World! Python Cheatsheet",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://www.pythoncheatsheet.org/latest/feed/",
                "value": "Hello, World! Python Cheatsheet"
            },
            "links": [
                {
                    "rel": "alternate",
                    "type": "text/html",
                    "href": "http://www.pythoncheatsheet.org/blog/python-cheatsheet-hello-word/"
                }
            ],
            "link": "http://www.pythoncheatsheet.org/blog/python-cheatsheet-hello-word/",
            "summary": "<p>Anyone can forget how to make <a href=\"https://www.pythoncheatsheet.org#Making-Your-Own-Character-Classes\">character classes for a regex</a>, <a href=\"https://www.pythoncheatsheet.org#Getting-Sublists-with-Slices\">slice a list</a> or do a <a href=\"https://www.pythoncheatsheet.org#Using-for-Loops-with-Lists\">for loop</a>. This cheat sheet tries to provide a basic reference for beginner and advanced developers, lower the entry barrier for newcomers and help veterans refresh the old tricks.</p>\n<h2>How to use it</h2>\n<p>It's very easy, just go to the <a href=\"https://www.pythoncheatsheet.org\">python cheatsheet</a> and use <strong>ctrl/cmd+z</strong> to open the <em>quick search</em> and start typing!</p>\n<p><img alt=\"quick_search\" src=\"https://raw.githubusercontent.com/wilfredinni/pysheetComments/master/2018/June/welcome/quick_search.png\" /></p>\n<p>If you are curious, the page renders a markdown file directly from the <a href=\"https://github.com/wilfredinni/python-cheatsheet\">Project Repository</a> and with some JavaScript, it indexes all the titles, subtitles and creates the anchor links, so every time a change is committed, the website is automatically updated.</p>\n<h2>Contribute</h2>\n<p>If you are interested, check how you can <a href=\"https://www.pythoncheatsheet.org/contribute\">contribute</a>, it's simple and beginner-friendly \u2764. And if you want to know more, read the website <a href=\"https://github.com/wilfredinni/pysheetBlog\">README</a> or the <a href=\"https://www.pythoncheatsheet.org/about\">about page</a>.</p>\n<p>Any thoughts or suggestion? Then leave a comment below.</p>",
            "summary_detail": {
                "type": "text/html",
                "language": null,
                "base": "https://www.pythoncheatsheet.org/latest/feed/",
                "value": "<p>Anyone can forget how to make <a href=\"https://www.pythoncheatsheet.org#Making-Your-Own-Character-Classes\">character classes for a regex</a>, <a href=\"https://www.pythoncheatsheet.org#Getting-Sublists-with-Slices\">slice a list</a> or do a <a href=\"https://www.pythoncheatsheet.org#Using-for-Loops-with-Lists\">for loop</a>. This cheat sheet tries to provide a basic reference for beginner and advanced developers, lower the entry barrier for newcomers and help veterans refresh the old tricks.</p>\n<h2>How to use it</h2>\n<p>It's very easy, just go to the <a href=\"https://www.pythoncheatsheet.org\">python cheatsheet</a> and use <strong>ctrl/cmd+z</strong> to open the <em>quick search</em> and start typing!</p>\n<p><img alt=\"quick_search\" src=\"https://raw.githubusercontent.com/wilfredinni/pysheetComments/master/2018/June/welcome/quick_search.png\" /></p>\n<p>If you are curious, the page renders a markdown file directly from the <a href=\"https://github.com/wilfredinni/python-cheatsheet\">Project Repository</a> and with some JavaScript, it indexes all the titles, subtitles and creates the anchor links, so every time a change is committed, the website is automatically updated.</p>\n<h2>Contribute</h2>\n<p>If you are interested, check how you can <a href=\"https://www.pythoncheatsheet.org/contribute\">contribute</a>, it's simple and beginner-friendly \u2764. And if you want to know more, read the website <a href=\"https://github.com/wilfredinni/pysheetBlog\">README</a> or the <a href=\"https://www.pythoncheatsheet.org/about\">about page</a>.</p>\n<p>Any thoughts or suggestion? Then leave a comment below.</p>"
            },
            "id": "http://www.pythoncheatsheet.org/blog/python-cheatsheet-hello-word/",
            "guidislink": false
        }
    ],
    "feed": {
        "title": "Python Cheatsheet",
        "title_detail": {
            "type": "text/plain",
            "language": null,
            "base": "https://www.pythoncheatsheet.org/latest/feed/",
            "value": "Python Cheatsheet"
        },
        "links": [
            {
                "rel": "alternate",
                "type": "text/html",
                "href": "http://www.pythoncheatsheet.org/blog/"
            },
            {
                "href": "http://www.pythoncheatsheet.org/latest/feed/",
                "rel": "self",
                "type": "application/atom+xml"
            }
        ],
        "link": "http://www.pythoncheatsheet.org/blog/",
        "subtitle": "Updates to the Python Cheatsheet Blog",
        "subtitle_detail": {
            "type": "text/html",
            "language": null,
            "base": "https://www.pythoncheatsheet.org/latest/feed/",
            "value": "Updates to the Python Cheatsheet Blog"
        },
        "language": "en-us",
        "updated": "Mon, 14 Mar 2022 15:04:28 +0000",
        "updated_parsed": [
            2022,
            3,
            14,
            15,
            4,
            28,
            0,
            73,
            0
        ]
    },
    "headers": {
        "server": "nginx",
        "date": "Mon, 14 Mar 2022 15:04:28 GMT",
        "content-type": "application/rss+xml; charset=utf-8",
        "content-length": "106494",
        "connection": "close",
        "x-frame-options": "DENY",
        "x-content-type-options": "nosniff",
        "x-xss-protection": "1; mode=block"
    },
    "href": "https://www.pythoncheatsheet.org/latest/feed/",
    "status": 200,
    "encoding": "utf-8",
    "version": "rss20",
    "namespaces": {
        "": "http://www.w3.org/2005/Atom"
    }
}